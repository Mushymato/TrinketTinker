{
  "CHANGELOG.html": {
    "href": "CHANGELOG.html",
    "title": "| TrinketTinker",
    "keywords": "Changelog All notable changes to this project will be documented here. The format is based on Keep a Changelog, and this project adheres to Semantic Versioning. 1.5.5 Changed MoveSync now only sync movement with owner when anchor mode is owner, use MoveSyncAll for old behavior. Serpent alt segment layer depth changes to make them consistent, this is entirely by vibes and implementation detail subject to change Fixed HarvestTo TrinketInventory not harvesting custom bush drops properly Temporary Animated Sprite now checks Condition, if given 1.5.4 Added Several more Harvest* abilities, and matching AnchorTarget HarvestTwig & AnchorTarget Twig HarvestWeed & AnchorTarget Weed HarvestDigSpot * AnchorTarget DigSpot Fixed Separated position from offset to make companions better at harvesting things at Range=0 HarvestCrop only harvesting to player inventory Jittery movement on Lerp with no overlap and velocity = -2 is now wobbly movement Content patcher consistently apply on equipped trinkets 1.5.3 Added Ability ProcSyncId is like ProcSyncIndex, but uses the Id to find what to Sync. Fixed Null handling on add item to tinker inventory Nop ignoring timer Regression on global inventory cleanup Fixed Crash on saving with more than 10 trinkets equipped Duplicating vanilla trinket companions 2 1.5.2 Added HitTAS for Hitscan/Projectile, apply a TAS at the target on hit. HitsDelay for Hitscan/Projectile, adds a delay between hits. Fixed Crash on saving with more than 10 trinkets equipped Duplicating vanilla trinket companions Changed Hitscan ProcTAS now fires at the companion's position, instead of the target position, this is because HitTAS was added 1.5.1 Fixed Crash on day ending 1.5.0 Added Interact now uses a keybind, configurable in GMCM Inventories of equipped trinkets can now be opened with a keybind, configurable in GMCM Updated documentation with all 1.5.0 changes Add 2 new GSQ please see docs mushymato.TrinketTinker_IN_ALT_VARIANT <Input|Target> <itemId> <item count compare> mushymato.TrinketTinker_TRINKET_HAS_ITEM <Input|Target> <itemId> <item count compare> Add 1 new Item Query for specific usage mushymato.TrinketTinker_HIRE_TRINKET <trinketId> Allow Proc Always to respect Condition 1.5.0-beta.2 Added Make sure your trinkets get unequipped if you end the day with trinketSlots=0 for some reason, unfortunately won't catch case where the trinketSlots stat changed after DayEnding Change ProcSound to a model with these 2 fields CueName: sound cue to play Pitch: list of int pitch (/2400), random one will be used Old form of string still works HarvestTo on HarvestStone/Forage/Shakeable/Crop now takes TinkerInventory, which puts the item into the companion's inventory (if it has one) HarvestTo now works with ItemDrop abilities Nop anim clips may now have a duration Alt variants for companions to switch variant on the fly (just visual, no effect on the variant number) Chatter ability, pick a dialogue from a set of Chatter dialogue data ProcChatterKey, force a particular chatter key the next time a chatter ability is activated Ability can now check for InCombat, combat is defined as \"location has monster\" and player have dealt damage/taken damage in the last 10 seconds Change GSQ to use Input/Target, new syntax: mushymato.TrinketTinker_IS_TINKER <Input|Target|ItemId> [level] [variant] mushymato.TrinketTinker_HAS_LEVELS <Input|Target|ItemId> mushymato.TrinketTinker_HAS_VARIANTS <Input|Target|ItemId> mushymato.TrinketTinker_ENABLED_TRINKET_COUNT <Input|Target|ItemId> <playerKey> [count] [trinketId] Fixed Made a bunch of lists in the data model nullable Deprecated Motions Draw for 36 slot trinket inventory 1.5.0-beta.1 Added New ability BroadcastAction, it's like action but it runs the action on multiplayer, useful with SetNpcInvisible and Host New Proc Interact which fires when player right clicks when overlapping with companion enough, as well as debug draw for bounding boxes. EquipTrinket now bans trinkets with CustomFields mushymato.TrinketTinker/DirectEquipOnly from entering the inventory in the first place. Lerp now has Velocity, -2: old behaviour, -1: match speed with farmer, 0 does not move except teleport, 1+ caps the velocity of the trinket. Lerp now has NoOverlap, makes this companion avoid entering the bounding box of another companion. Speech bubble allowed to interrupt previous speech bubble during fade out time New actions for equipping a hidden trinket, does not require trinketSlot to use (up to modder to gate that trigger action) mushymato.TrinketTinker_EquipHiddenTrinket <trinketId> [level] [variant] [daysDuration]: equip trinket for daysDuration days, or -1 by default (unequip only with the following action) mushymato.TrinketTinker_UnequipHiddenTrinket <trinketId> [level] [variant]: unequip trinket level and variant do not support R, unlike mushymato.TrinketTinker_CREATE_TRINKET 1.5.0-beta.0 Added Allow HarvestShakeable to target larger bushes (but not walnut bush), handle BushBloomMod integration New game state queries mushymato.TrinketTinker_IS_TINKER [level] [variant]: check the input item is a trinket with tinker data, then check if the item is of some level and variant. Compare operators can be used, one of >1, <1, >=1, <=1, !=1. mushymato.TrinketTinker_HAS_LEVELS: check the input item is a trinket with tinker data, then check if the input item has any unlocked levels. mushymato.TrinketTinker_HAS_VARIANTS: check the input item is a trinket with tinker data, then check if the input item has any unlocked variants. mushymato.TrinketTinker_ENABLED_TRINKET_COUNT <playerKey> [count] [trinketId]: Count number of trinket of particular ID (either the optional trinketId or inputItem) equipped and activated, and compare it to a number. MachineOutputItem CustomData mushymato.TrinketTinker/Increment, allows upgrading a trinket's level or variant by X amount Trinket companion/effects can be silenced with EnableCondition on TinkerData, essentially making them do nothing on equip. Trinket can now have an inventory via Inventory on TinkerData, \"use\" the trinket item to open this inventory. EquipTrinket ability, equips trinkets inside the inventory. Trinkets can be banned from this ability by setting mushymato.TrinketTinker/DirectEquipOnly to \"T\" or any non null value. Trinkets equipped this way will have modData mushymato.TrinketTinker/IndirectEquip set to \"T\". ActionAbility: support for Actions (list of actions), ActionEnd (action to run at removal for AlwaysProc), and ActionsEnd (list of end actions) TriggerActionContext from ActionAbility now use mushymato.TrinketTinker/Action as name and pass these fields via CustomFields: mushymato.TrinketTinker/Owner: trinket owner (Farmer) mushymato.TrinketTinker/Trinket: trinket item (Trinket) mushymato.TrinketTinker/Data: AbilityData (TrinketTinker.Models.AbilityData) mushymato.TrinketTinker/Position: companion position including offset (Vector2) GameStateQueryContext from ability proc check now provides the trinket item as inputItem and targetItem, along with mushymato.TrinketTinker/Data: AbilityData (TrinketTinker.Models.AbilityData) mushymato.TrinketTinker/Position: companion position including offset (Vector2) LerpMotion Velocity argument Limits velocity to some constant float When velocity is -1, match velocity to player movement speed Default: velocity is -2 or lower, regular Lerp Fixed Some abilities did not apply due to an incorrect check for max level 1.4.5 Fixed Error with filtering for certain types of crops (ginger?). 1.4.4 Added Draw debug mode that shows the sprite index of the companion on screen. Toggle with command tt_draw_debug. Fixed Companions not appearing in volcano and farm buildings. 1.4.3 Added New HarvestShakeable ability to shake trees bushes and fruit trees. New Shakeable anchor target. New Nop ability that does nothing, but can be used for purpose of proc effects. Anchors can now specify a list of RequiredAbilities. If set, the anchor only activates if the trinket has ability of matching AbilityClass at the current level. Some mode dependent default values are provided. Abilities can define ProcSyncDelay for how much time should pass between its proc and any follow up abilities. Crop and Forage Anchors can now specify context tag items to ignore. HarvestCrop and HarvestForage can now specify context tag items to ignore. fr.json by by Caranud 1.4.2 Fixed Hopefully fix a crash after some events, very strange. 1.4.1 Added Add support for randomized speech bubbles. Add \"Swim\" anim clip key for when the player is swimming. Fixed Companions duplicating when farmhand is exiting an event. 1.4.0 Added Add support for randomized anim clips. Add speech bubble feature. Allow one shot clips to pause movement. Changed perching clip to behave by static motion rules (check against player facing direction), rather than lerp motion rules (check against companion facing). Fixed AbilityProc clips not playing in multiplayer. 1.3.0 Added Additional HarvestTo field for Harvest type abilities to determine where the harvested item go (inventory, debris, none). New field Filter on Anchors and on Hitscan/Projectile ability. If set, the enemy types listed will not be targeted. Fixed Lerp MoveSync companions moving when a weapon is swung. They are now prevented from moving while a tool is being used. Also applies to check for perching. 1.2.1 Fixed Prevent trinket tinker anvil output method from affecting non trinket tinker items. 1.2.0 Added New \"Homing\" argument on projectile to make projectile recheck target midflight. Fixed Projectile used wrong target point, change to bounding box center. 1.1.0 Fixed Update for SDV 1.6.14, add new \"sourceChange\" argument in ItemQueryContext. 1.0.2 Fixed Correctly invalidate Data/Trinkets whenever the Tinker asset gets invalidated. 1.0.1 Fixed Add workaround for issue where TrinketEffectClass ends up being null. 1.0.0 Added Implement all the things."
  },
  "guide/0-Trinket.html": {
    "href": "guide/0-Trinket.html",
    "title": "Trinkets | TrinketTinker",
    "keywords": "Trinkets Note The following page covers how trinkets are added in the base game, regardless of whether TrinketTinker is being used. You must add trinket items before you can extend it with trinket tinker data. Trinkets can be added with by editing Data/Trinkets, generally with Content Patcher. Example { \"Changes\": [ // Load texture { \"Action\": \"Load\", \"Target\": \"Mods/{{ModId}}/MyTrinket\", \"FromFile\": \"sprites/{{TargetWithoutPath}}.png\" }, // Edit Data/Trinkets { \"Action\": \"EditData\", \"Target\": \"Data/Trinkets\", \"Entries\": { \"{{ModId}}_MyTrinket\": { // Trinket ID, gives qualified ID of (TR){{ModId}}_MyTrinket \"Id\": \"{{ModId}}_MyTrinket\", // Display name (with i18n) \"DisplayName\": \"{{i18n:MyTrinket.DisplayName}}\", // Description, can include {0} token for the trinket level and {1} for ability descriptions \"Description\": \"{{i18n:MyTrinket.Description}}\", // Path to asset texture load target \"Texture\": \"Mods/{{ModId}}/MyTrinket\", // Sheet index (with 16x16 sprite size) \"SheetIndex\": 0, // Type that controls behavior of trinket, changing this alters what the trinket does, but several effects are hardcoded. \"TrinketEffectClass\": \"StardewValley.Objects.Trinkets.TrinketEffect\", // Add trinket to random drop pool once player attains combat mastery // Can still add other ways to acquire (e.g. shops, machine outputs) \"DropsNaturally\": true, // Allow trinket to reroll stats on the anvil (and reroll appearance on the colorizer, for trinkets with tinker data). \"CanBeReforged\": true, // Mod specific data, shared across trinkets // \"CustomFields\": null, // Mod specific data, per instance of trinket // \"ModData\": null }, } } ] } Tip Refer to content patcher docs for more details about EditData and Load TrinketEffectClass The vanilla game provide these trinket effect classes: Type Name Notes StardewValley.Objects.Trinkets.TrinketEffect Base class, drops coins if the id is ParrotEgg StardewValley.Objects.Trinkets.RainbowHairTrinketEffect Makes your hair prismatic StardewValley.Objects.Trinkets.CompanionTrinketEffect Spawns the hungry frog companion StardewValley.Objects.Trinkets.MagicQuiverTrinketEffect Shoot an arrow every few seconds StardewValley.Objects.Trinkets.FairyBoxTrinketEffect Heal the player every few seconds while in combat StardewValley.Objects.Trinkets.IceOrbTrinketEffect Shoot an icy orb that freezes the enemy every few seconds The Golden Spur and Basilisk Paw effects are not implemented through an effect class, instead certain parts of game simply checks if the player has a specific trinket equipped. Trinket tinker uses a specific TrinketEffectClass, it is automatically set so there is no need to provide when editing Data/Trinkets."
  },
  "guide/1-Tinker.html": {
    "href": "guide/1-Tinker.html",
    "title": "Tinker | TrinketTinker",
    "keywords": "Tinker To make a trinket use TrinketTinker features, add a new entry to the custom asset mushymato.TrinketTinker/Tinker. The key used must match the unqualified ID of the trinket, e.g. {{ModId}}_Trinket instead of (TR){{ModId}}_Trinket. When a mushymato.TrinketTinker/Tinker entry exists, the TrinketEffectClass field on Data/Trinkets will be set to TrinketTinker.Effects.TrinketTinkerEffect from this mod. Note Trinkets can be reloaded with patch reload <your content mod id>. Structure Property Type Default Notes EnableCondition string null A game state query used to check if the trinket should be enabled. This is checked on equip, it can only be rechecked by reequipping the trinket. The check also happens every night, when the trinket is unequipped/reequipped by the game. EnableFailMessage string null When EnableCondition is false, this message will be displayed upon equipping the trinket. Default message: \"You are not worthy of {{trinketName}}...\" MinLevel int 1 Changes the level value that will replace {0} in DisplayName. Variants List<VariantData> null Defines the sprites of the companion. Motion MotionData null Defines how the companion moves. Abilities List<List<AbilityData>> null Defines what effects are activated, and when. Each list in the list of lists represents 1 ability level. VariantUnlockConditions List<string> null List of game state queries that determine how many variants are unlocked. AbilityUnlockConditions List<string> null List of game state queries that determine how many abilities are unlocked. Inventory TinkerInventoryData null Gives the trinket an inventory that can be opened by the \"use\" button (RightClick/X) over the trinket item. Chatter Dictionary<string, ChatterLinesData> null Gives the trinket dialogue for use with the Chatter ability. This is a lot of stuff, what do I need to define? Technically all fields here are optional, but in that case there'd be little point to using this framework at all. To display a companion, at least Motion and 1 Variant must be defined. To have the trinket do things after equippping, at least 1 list of abilities must be defined. For Inventory and Chatter usage, refer to their subpages. Trinkets are created with the first variant and at minimum level. The item query mushymato.TrinketTinker_CREATE_TRINKET is needed to create trinket at other variants/levels. Unlock Conditions VariantUnlockConditions and AbilityUnlockConditions can prevent the player from rolling variants or abilities above a certain level using game state queries. This only affects rerolling level and variants on the anvil and colorizer. Example usage with 4 abilities (lv1 to lv4): \"AbilityUnlockConditions\": [ // level 1 is always unlocked // level 2 is unconditionally unlocked null, // level 3 unlocked if player has a gold ore in inventory \"PLAYER_HAS_ITEM Current (O)384\", // level 4 is also unconditionally unlocked once 3 is unlocked null, // there is no level 5, so this value is meaningless \"FALSE\", ], Deprecated Motions, previously unused but exists, is deprecated as of 1.5.0"
  },
  "guide/2-Variant.html": {
    "href": "guide/2-Variant.html",
    "title": "Variant | TrinketTinker",
    "keywords": "Variant In the base game certain companions such as the frog have different color variants. With this model, you can explicitly define a sprite sheet, texture size, and optionally a color for mask. The trinket colorizer can be used to reroll the trinket variable, but you can also add other machine rules or shop entries for purpose of obtaining trinket in a specific variant. Variants can have alternate variants, which are automatically rechecked whenever the player changes locations, or when an ability has ProcAltVariant set. Shared Fields These fields are valid for both variant and alt variant. Property Type Default Notes Texture string required Asset target of the loaded texture, should be a sprite sheet. TextureExtra string null Additional sprites of the same dimension as the original, for use in AnimClip. ColorMask string null Color to apply on draw, for use with grayscale sprites. Aside from RGB and hex values, monogame accepts named colors and this mod accepts special value \"Prismatic\" for an animated color cycle. Width int 16 Width of 1 sprite on the sprite sheet. Height int 16 Height of 1 sprite on the sprite sheet. TextureScale float 4 Texture draw scale, default is 4 like most things in the game. ShadowScale float 3 Size of the shadow to draw, 0 to disable shadow. Portrait string null A portrait texture for the Chatter ability, required to display a portrait and a name. NPC string null An NPC name (key of Data/Characters) to associate this variant with, used for the Chatter ability. Name string null A display name for the Chatter ability, used if there's no real NPC. Top Level Variant The top level variant can have all shared fields, as well as: Property Type Default Notes LightSource LightSourceData null If set, display a light source. This light source is only visible to the owner. TrinketSpriteIndex int -1 If set, alters the trinket item's sprite index to this. This is used to give the trinket different icon depending on the variant. TrinketNameArguments List<string> null If set, use these strings as the argument to the item name. AltVariants Dictionary<string, AltVariantData> null A dictionary of alternate variants. TrinketSpriteIndex and TrinketNameArguments These two fields are used to allow variants to have different name and icons. TrinketSpriteIndex: Changes the sprite index along with variant, meaning that if your trinket's texture is a sprite sheet with multiple item icon sprites, this can be used to point to a specific one. To make this work, put every icon associated with the variants of 1 trinket on 1 texture. You cannot change to a completely different texture, or use color masks. TrinketNameArguments: Adds substitute strings for use with {0} in DisplayName, for example: // Data/Trinkets \"DisplayName\": \"My Trinket {0} {1}\", // mushymato.TrinketTinker/Tinker \"Variants\": [ { \"Texture\": \"{{ModId}}/trinkets/red/water\", \"TrinketNameArguments\": [\"Red\", \"Water\"], }, { \"Texture\": \"{{ModId}}/trinkets/blue/fire\", \"TrinketNameArguments\": [\"Blue\", \"Fire\"], } ] The resulting trinket can have these names: \"My Trinket Red Water\", for the first Variant \"My Trinket Blue Fire\", for the second Variant Alt Variant Only The alt variant in AltVariants can have all shared fields, as well as: Property Type Default Notes Condition string \"FALSE\" A game state query used to check if this alt variant should be selected. If you want to have an alt variant exclusively activate through ability with ProcAltVariant, use \"FALSE\". Priority int 0 Sort priority of this variant, higher number have their conditions checked first. Note that not all shared fields are required in alt variant, and any not set field will simply fall back to the value found in top level. An example: Change the companion's appearance during winter. // assuming \"{{ModId}}/Companion\" and \"{{ModId}}/Companion_Winter\" are loaded \"Variants\": [ { \"Texture\": \"{{ModId}}/Companion\", \"Width\": 16, \"Height\": 32, \"AltVariants\": { \"WINTER\": { // Since Width and Height is not set, // The alt variant inherits 16x36 from the base variant. \"Texture\": \"{{ModId}}/Companion_Winter\", \"Condition\": \"SEASON Winter\" } } } ], Abilities can explicitly set a specific variant, which bypasses Condition. If you want to make a special variant that only activates by ability proc, set the Condition to \"FALSE\" to exclude it from standard checks. LightSourceData Property Type Default Notes Radius float 2 Size of light source. Index int 1 Vanilla light source texture index. Texture string 1 Custom light map, must be loaded into game content. Color string null Light color name, accepts same values as ColorMask. Notes There's no need to have the same width and height in all variants, or the same scale. What does matter is having the right number of sprites for all your animation."
  },
  "guide/3-Motion.html": {
    "href": "guide/3-Motion.html",
    "title": "Motion | TrinketTinker",
    "keywords": "Motion Motion describes how the companion moves and animates. There are 2 main kinds of motion implemented in by this mod. Lerp: the companion moves to follow whenever the anchor moves far enough. If the anchor is too far, teleport over. Static: the companion stays at a fixed position relative to the anchor. Each of these have sub types like Hover for Lerp motion that hovers, see the individual pages on the sidebar for details. The term \"anchor\" refers to a position that the companion derives it's own position from. By default this is the player, but it can also be other entities like a monster. Structure Property Type Default Notes MotionClass string \"Lerp\" Type name of the motion class to use, can use short name like \"Hover\". Refer to pages under Motion Classes in the table of contents for details. DirectionMode DirectionMode Single Determines how the trinket behaves when changing directions and controls what sprites are required. DirectionRotate bool false When true, the sprite will rotate depending on direction, the exact behavior depends the motion class. LoopMode LoopMode Standard Control animation playback. Standard: 1 2 3 4 1 2 3 4 PingPong: 1 2 3 4 3 2 1 Anchors List<AnchorTargetData> null Ordered list of anchors to follow, if not set, fall back to following the player AlwaysMoving bool false By default the companion only animates while the player is moving, setting this to true makes the companion continue their animation. FrameStart int 0 First frame/sprite index of the directional animations, set this if you want to put multiple companions on 1 file. FrameLength int 4 Length of each cycle for directional animations. Interval float 100 Milisecond Interval between animation frames. Offset Vector2 0, 0 Constant offset to apply to the companion, on top of the motion. LayerDepth LayerDepth Position Changes draw layer relative to player. Position: Calculate layer based on Y position Behind: Always behind the player. InFront: Always infront of the player HideDuringEvents bool false Hide the companion during events. RepeatCount int 0 Number of additional repeat draws to do, to make 1 companion appear to be multiple. RepeatInterval int 1000 Miliseconds between repeat draws. RepeatFrameSets int 0 If set, offset the sprite on repeat draw. AnimClips Dictionary<string, AnimClipData > null Named anim clips that can play over the movement animation. SpeechBubbles Dictionary<string, SpeechBubbles > null Named speech bubbles that appear over the companion. Args Dictionary varies Arguments specific to a motion class, see respective page for details. Animation The default animation behavior for a companion is to animate while the player is moving according to direction mode, and display static first frame when player is still. To use a special animation while player is still, add an AnimClip named \"Idle.0\". If the idle animation should change according to direction, add \"Idle.X\" where \"X\" is a number between 1 to 4, depending on how many directions are available for the chosen DirectionMode. See animation clips for details. To have the directional animation continue regardless of player motion, set AlwaysMoving to true. Repeat Draws One trinket can only have one companion, but it's possible to make this companion appear as multiple entities by repeating draws with a delay, creating \"shadow clones\". Abilities only happen relative to the first, original copy of the companion. To give these clones alternate appearances, extend the spritesheet downward with a modified duplicate of the companion's animations containing the same number of frames as the original. Then, set RepeatFrameSets to the number of these duplicate frames. Example RepeatCount: 2 RepeatFrameSets: 3 Spritesheet:"
  },
  "guide/3.0-Direction.html": {
    "href": "guide/3.0-Direction.html",
    "title": "Direction Mode | TrinketTinker",
    "keywords": "Direction Mode Direction mode determines number of sprites and the required arragements on the sprite sheet. This only describes number of sprites required, the sprite width and height is controlled by variants. In content patcher, use a string value like \"DirectionMode\": \"DRUL\" to set this value. Internally it is an enum. Arrangement charts in this page assumes FrameLength is 4, but you can have as many frames as desired. There's also no need to adhere to exact row layout as long as you have the correct number of sprites in the left to right & up to down order, but it is easier to organize this way as the companion's current direction is represented by a number corresponding to which set of animation it will use (with negative number representing flipped sprite), if the rows all have FrameLength number of items, then the direction index is simply the row number. Direction index is involved in anim clips, where it is used to set different clip per direction as desired. In the following Direction Index tables, * indicates that this direction will not change the companion's direction index, i.e. it will continue with previous value until the next direction that will change index. Single Animate the sprite, ignore all changes to direction. This is the default value. Number of Sprites Required: 1 x FrameLength (4 by default) Direction Index Direction Index Down 1 Right 1 Up 1 Left 1 R - Right Similar Single but the sprite is flipped when going left. Number of Sprites Required: 1 x FrameLength (4 by default) Direction Index Direction Index Down * Right 1 Up -1 Left * DRUL - Down Right Up Left This mode is similar to NPC and animal sprites in the base game. Four sets of animations are required, one per direction. Number of Sprites Required: 4 x FrameLength (16 by default) Direction Index Direction Index Down 1 Right 2 Up 3 Left 4 RL - Right Left Similar to R, but allows you to supply left facing sprites for asymmetrical companions. Number of Sprites Required: 2 x FrameLength (8 by default) Direction Index Direction Index Down * Right 1 Up 2 Left * DRU - Down Right Up Similar to DRUL, but allows you to skip left facing sprites for symmetrical companions. Number of Sprites Required: 3 x FrameLength (12 by default) Direction Index Direction Index Down 1 Right 2 Up 3 Left -2"
  },
  "guide/3.1-Anchors.html": {
    "href": "guide/3.1-Anchors.html",
    "title": "Anchor Mode | TrinketTinker",
    "keywords": "Anchor Mode A companion's motion is relative to another entity's position, generally the player. Anchors consist of a list of AnchorTargetData The order matters as companion will try for anchors in order, and stop once a target is found for a given anchor mode. When no targets are found, fallback to Owner. Structure Property Type Default Notes Mode AnchorTarget Owner Anchor target, described below. Range int 640 Search range in pixels, only switch anchor when the target is less than this far from owner. Filters List<string> null List of anchor mode specific filters, see the headings on each Mode for details. If not specified, then no filters have been implemented. RequiredAbilities List<string>? mode dependent List of ability classes to check for to determine if this anchor should be enabled. Some modes have default values, which can be cleared by setting this value to null. Monster Anchor to nearest monster. Filters: list of monsters to avoid targeting, based on their key in Data/Monsters. RequiredAbilities: Default \"Hitscan\", \"Projectile\". Forage Anchor to nearest forageable item. Filters: list of context tags to avoid harvesting, e.g. \"category_flowers\" (exclude flower category) or \"color_orange season_summer\" (exclude orange and summer). Each space separated sub list of tags act as AND while the overall list act as OR. RequiredAbilities: Default \"HarvestForage\". Stone Anchor to nearest breakable stone. RequiredAbilities: Default \"HarvestStone\". Object Anchor to nearest placed object. This is a superset of Stone and Forage, but also placed objects on the ground. Crop Anchor to nearest harvestable crop. Filters: list of context tags to avoid harvesting, e.g. \"category_flowers\" (exclude flower category) or \"color_orange season_summer\" (exclude orange and summer). Each space separated sub list of tags act as AND while the overall list act as OR. For crops, only the main harvestable item is considered. RequiredAbilities: Default \"HarvestCrop\". Shakeable Anchor to nearest shakeable bush/tree/fruit tree. Filters: list of \"Bush\", \"Tree\", \"FruitTree\", indicating which of the 3 possible categories to avoid targeting. RequiredAbilities: Default \"HarvestShakeable\". TerrainFeature Anchor to nearest terrain feature. This is a superset of Crop and Shakeable. Owner Anchor to the player who equipped the trinket. Range has no effect. This is the default anchor."
  },
  "guide/3.2-Animation Clips.html": {
    "href": "guide/3.2-Animation Clips.html",
    "title": "Animation Clips | TrinketTinker",
    "keywords": "Animation Clips Beyond the basic directional movement animation, companions can also have special animation states triggered by either a motion or an ability. These extra animations must live on the same sprite sheet and have the start frame + frame length specified as an entry in Motion AnimClips, with the right key. The start frame counts up from 0 and can be any frame on the sheet, including the previously discussed movement frames. Consider these 2 situations: The clip reuses frames in the directional animation: No new frames added. Count to the desired starting frame by going left to right, up to down. The clip's frames are unique: Append new frames to the end of the animation sheet. Count the length of the directional animation (e.g. 4*4 = 16), this will be the start frame. Additional clips that follow would start even later of course. Tip The console command tt_draw_debug is helpful for debugging animation frames in game. Animation clips can be played back once (oneshot), or continuously played over the directional movement animation (override). This is decided by particular motions/abilities/states that request the animation. Structure Property Type Default Notes FrameStart int 0 First frame/sprite index of the animation clip. FrameLength int 4 Length of the animation clip. LoopMode LoopMode Standard Control animation playback. Standard: 1 2 3 4 1 2 3 4 PingPong: 1 2 3 4 3 2 1 Interval float null Milisecond Interval between animation frames. If this is not set, use the Motion's interval. PauseMovement bool false If true, pause movement update of this animation clip if it plays as a one shot anim clip. Condition string \"FALSE\" A game state query used to check if this clip is allowed to play. Note that unlike most Condition checked by trinket tinker, this one does not receive the trinket as Input/Target item and will not work if a given query is meant to check for a trinket item there. UseExtra bool false If true, try to use TextureExtra instead of Texture from Variant. RandomClips List<AnimClipData> null Allows extra random anim clips to be provided for this key, only relevant for the top level anim clip. RandomWeight int 1 Weight of random clip, if provided. Higher weight relative to other clips makes it more frequent. Nop bool false Indicates a no-op clip that does nothing, for use with RandomClips. Priority At each update, clips are evaluated in this order: oneshot > override > swiming > moving(anchor) > moving(directional) > idle Random Clips RandomClips allows one clip key to be associated with multiple clips, to be chosen by random. For oneshot clips, the random is checked once before they play. For override clips, random is rechecked at the end of 1 cycle of clip. To have a case where no clip is rolled, set Nop on a clip. When a Nop=true clip is chosen, the next recheck of random will be delayed by Interval * FrameLength, thus the frame number/interval is still meaningful. RandomWeight can be thought of as frequence. If there are 3 clips with RandomWeight of 1 2 3, the weight 1 clip will appear 1 in 6 times, while the weight 3 clip will appear 3 in 6 times, or 1 in 2. Clips inside RandomClips may not have their own RandomClips. The randomization logic here is identical to RandomSpeech for speech bubbles. Available Clips Directional AnimClip Keys All anim keys can take on a directional index suffix such as \"{KEY}.1\" which depends on the direction mode. The suffix takes the absolute value of the index, no need to manually flip sprites for negative direction index. Example: when the direction index is 1 and the player is still, \"Idle.1\" will be picked if available, fallback to \"Idle\". Motion Defined Keys These animation are applied when companion enter a state defined by particular motion, except for \"Idle\", which applies for all motions. These are considered \"override\" anim clips, which play until the player or trinket leaves the specified state. Key Motion Note \"Perching\" Hover Applies when companion perches on the player after a timeout, this is an override key. Perching follows static motion rules about directions (i.e. always faces same direction as player). \"Jump\" Bounce, Hop Applies when the companion is jumping, this is an override key. \"Idle\" All Motions Played when the player is not moving, Does nothing if companion is marked AlwaysMoving which forces regular directional animation to continue. \"Swim\" All Motions Played when the player is swiming, supercedes movement and idle animation. Anchor Defined Keys These keys activate while the companion is locked into a particular anchor, and cease once they are no longer targeting that anchor. Key Note \"Anchor.<Mode>\" The mode referred to here is an anchor mode, see Anchors. Ability Defined Keys These keys are defined by mod, in specified models. Field Model Note ProcOneshotAnim AbilityData Play the clip once on ability proc. This is a oneshot animation, after 1 cycle is finished the companion returns to normal directional animation."
  },
  "guide/3.3-Speech Bubbles.html": {
    "href": "guide/3.3-Speech Bubbles.html",
    "title": "Speech Bubbles | TrinketTinker",
    "keywords": "Speech Bubbles Speech bubbles are a way to have the companion \"speak\" by drawing overhead text. Currently, the only way to activate a speech bubble is through ability activation with ProcSpeechBubble set to the desired key. This particular feature uses the same system vanilla does for overhead NPC text, so the amount of customization is limited. If you need something fancier, you will have to use temporary animated sprites to show/animate a custom sprite featuring your text. Structure Property Type Default Notes Text string \"Hey, Listen!\" The text to put in a bubble. Timer double 3000 Amount of time in miliseconds to display this bubble. Offset Vector2 0,0 By default, the text is drawn above the companion's sprite, this adds additional offset on top. Color string null Speech text color. Aside from RGB and hex values, monogame accepts named colors and this mod accepts special value \"Prismatic\" for an animated color cycle. ScrollType int 1 Type of scroll(background) to draw, 0 1 2 3 4 all give valid backgrounds. LayerDepth float 1 Layer depth offset from the companion's draw layer depth. JunimoText bool false Layer depth offset from the companion's draw layer depth. FadeIn float 0.1 Percent of timer to spend in fade in (transparent to solid). FadeOut float 0.1 Percent of timer to spend in fade out (solid to transparent). Another clip is allowed to interrupt the current clip during this time. Shake int 0 If greater than 0, randomly offset the draw position each frame. Condition string \"FALSE\" A game state query used to check if this speech bubble is allowed to play. Note that unlike most Condition checked by trinket tinker, this one does not receive the trinket as Input/Target item. RandomSpeech List<SpeechBubbleData> null Allows extra random anim clips to be provided for this key, only relevant for the top level anim clip. RandomWeight int 1 Weight of this random speech. Higher weight relative to other clips makes it more frequent. Nop bool false Indicates a no-op speech that does nothing, for use with RandomSpeech. Random Clips RandomSpeech allows one speech bubble key to be associated with multiple clips, to be chosen by random. The speec bubble is rolled each proc. RandomWeight can be thought of as frequence. If there are 3 speech bubbles with RandomWeight of 1 2 3, the weight 1 bubbles will appear 1 in 6 times, while the weight 3 bubbles will appear 3 in 6 times, or 1 in 2. The randomization logic here is identical to RandomClips for anim clips."
  },
  "guide/3.z-Motion Classes.html": {
    "href": "guide/3.z-Motion Classes.html",
    "title": "| TrinketTinker",
    "keywords": ""
  },
  "guide/3.z.000-Lerp.html": {
    "href": "guide/3.z.000-Lerp.html",
    "title": "Lerp | TrinketTinker",
    "keywords": "Lerp The companion follows the anchor at a distance. They will move as fast as they need to in order to stay within the desired distance. Lerp motion operate by this logic, using a lerp variable between 0 and 1. If the companion is too far (>Max) from the anchor position, teleport to the anchor. If the companion is far enough (>Min) from the anchor position, Record companion current position as start. Pick an end position based on the anchor. Enter lerping state. When start and end positions are set, increase lerp by value relative to elapsed game time, then calculate companion position with start + (end - start) * lerp. If Velocity is 0 or greater, calculate the lerp value by the velocity instead. Once lerp reach 1 (and thus the companion reached the end position), exit lerping state. This completes 1 lerp step, and the companion will try to initiate new lerp state in the next game update tick. Args Property Type Default Notes Min float 96 Min distance from anchor, the companion does not move until they are this far from the anchor. Max float 1280 Max distance from anchor, if the companion is farther away than this, teleport. This argument is not speed, but rather how often the new Lerp target is to be checked. A larger number makes the companion takes longer strides. Rate float 400 Miliseconds needed to complete 1 lerp, higher number makes companion take larger but slower lerp steps. Pause float 0 Pause between picking next position to lerp to. MoveSync bool false When true and anchor is Owners, only allow companion to move when the player moves. MoveSyncAll bool false When true, only allow companion to move when the player moves. Jitter float 0f Add randomness to movement, if greater than 0 and AlwaysMoving is true, the companion will randomly move around the anchor while within minimum range. Velocity int -2 Limit the companion's velocity to a constant number, rathern than variable with lerp. Has special values -2 (unlimited), and -1 (follow the owner's velocity, when anchored to owner). NoOverlap bool true When true and when the player has multiple trinkets with companions equipped, avoid overlapping with any other companion."
  },
  "guide/3.z.001-Hover.html": {
    "href": "guide/3.z.001-Hover.html",
    "title": "Hover | TrinketTinker",
    "keywords": "Hover Like Lerp motion, but the companion is drawn some distance away from their shadow, making them seem like they are hovering. They also do a little bit of periodic bobbing motion. The offset can be controlled with motion offset. Args Property Type Default Notes Magnitude float 16 Amount of up and down bobbing in pixels. Period float 800 Period of the bobbing motion in miliseconds. PerchingTimeout float null If set, companion will try to perch on the player when the player is still for this many miliseconds. PerchingOffset Vector2 0,0 Postion offset when perching, must use the string \"x,y\" format. *and all arguments of Lerp Perching When PerchingTimeout is set to a non-null value, the companion will \"land\" on the player's head after the timeout elapses. To have the companion show an alternate animation, set a \"Perching\" animation clip with the desired frame start, frame length, etc. PerchingOffset changes the perching position, relative the default \"Perching\" position."
  },
  "guide/3.z.002-Bounce.html": {
    "href": "guide/3.z.002-Bounce.html",
    "title": "Bounce | TrinketTinker",
    "keywords": "Bounce Like Lerp motion, but the companion bounces up and down periodically. To have the companion show an alternate animation while bouncing, set a \"Jump\" animation clip with the desired frame start, frame length, etc. The difference between Bounce and Hop is that bounce calculates bounces independent of lerp start and end, it also provides squashing for deforming the sprite when hitting the ground. Args Property Type Default Notes MaxHeight float 96 Height of bounce. Squash float 0f Amount of squish to apply when companion hits the ground. Period float 400 Length of each bounce in miliseconds. *and all arguments of Lerp"
  },
  "guide/3.z.003-Hop.html": {
    "href": "guide/3.z.003-Hop.html",
    "title": "Bounce | TrinketTinker",
    "keywords": "Bounce Like Lerp motion, but the companion leaps from point to point, following the start and end positions set by lerp. To have the companion show an alternate animation while bouncing, set a \"Jump\" animation clip with the desired frame start, frame length, etc. The difference between Hop and Bounce is that hop is synchronized with lerp start and end positions. Due ot reliance on lerp, hop motion appears janky in multiplayer. Args Property Type Default Notes MaxHeight float 128 Height of bounce. *and all arguments of Lerp"
  },
  "guide/3.z.004-Serpent.html": {
    "href": "guide/3.z.004-Serpent.html",
    "title": "Serpent | TrinketTinker",
    "keywords": "Serpent Draws additional body segments that follow the base sprite, which is treated as the head. Requires 2 additional sets of sprites for the body segments and tail. The number per set required is the determined by direction and frame length, just like the base sprite number. A minimal serpent would require just 3 sprites (head, segment, tail), using direction mode Single with frame length of 1. Serpent frame To have the head rotate as well, set DirectionRotate to true. Args Property Type Default Notes SegmentCount int 5 Number of segments to draw, excluding the head. SegmentAlts int 1 Number of alternate segment appearanches, default 1 means only 1 kind of segment. Multiple kinds of segments will be drawn in alternating order. HasTail bool true Whether this serpent is capped off by a unique segment that comes immediately after the last (alt) segment. Sparcity float 3.5 Factor determining how spaced out each segment is. The default value of 3.5 gives a little bit of overlap between segments. *and all arguments of Lerp"
  },
  "guide/3.z.100-Static.html": {
    "href": "guide/3.z.100-Static.html",
    "title": "Static | TrinketTinker",
    "keywords": "Static Companion animates according to direction rules, but otherwise does not move. When DirectionRotation is true, the companion points the right side of their sprite towards the owner's facing direction. Args No extra arguments."
  },
  "guide/3.z.101-Orbit.html": {
    "href": "guide/3.z.101-Orbit.html",
    "title": "Orbit | TrinketTinker",
    "keywords": "Orbit Orbit around the anchor in a orbital, gets hidden by player for a perspective-ish effect. Args Property Type Default Notes RadiusX float 96 Horizontal radius. RadiusY float 40 Vertical radius. Height float 64 Y offset from position to shadow. Period float 1000 Period of 1 orbit around player, in miliseconds."
  },
  "guide/3.z.102-Relative.html": {
    "href": "guide/3.z.102-Relative.html",
    "title": "Orbit | TrinketTinker",
    "keywords": "Orbit Alters the offset depending on the direction, to give illusion that the trinket is attached to the player. Offset and layer can be individually applied per direction, which is determined by the player's facing direction rather than this mod's of direction mode. Args Property Type Default Notes OffsetD float null Directional offset, down. OffsetR float null Directional offset, right. OffsetU float null Directional offset, up. OffsetL float null Directional offset, left. LayerD float null Layer depth offset, down. LayerR float null Layer depth offset, right. LayerU float null Layer depth offset, up. LayerL float null Layer depth offset, left."
  },
  "guide/4-Ability.html": {
    "href": "guide/4-Ability.html",
    "title": "Ability | TrinketTinker",
    "keywords": "Ability Ability describes the effects that occur while the trinket is equipped. Such the healing the player, harvesting a crop, attacking an enemy, and so on. An ability is primarily defined by AbilityClass (what it does) and Proc (when does it activate). Following the successful proc of an ability, a number of proc effects can happen. Structure Property Type Default Notes Id string same as AbilityClass The Id of this ability, used for ProcSyncId and content patcher EditData. AbilityClass string \"Nop\" Type name of the motion class to use, can use short name like \"Buff\". Refer to docs under \"Ability Classes\" in the table of contents for details. Description string null String of the ability, will be used to substitute \"{1}\" in a trinket's description. Proc ProcOn Footstep Make ability activate (proc) when something happens. ProcTimer double -1 After an ability proc, prevent further activations for this amount of time. ProcSyncId string null For use with Proc.Sync, makes this ability proc after another ability in the same level, by their Id. If set, this field takes precedence over ProcSyncIndex. ProcSyncIndex int 0 For use with Proc.Sync, makes this ability proc after another ability in the same level, by their order in the list of abilities. ProcSyncDelay int 0 For use for other abilities with Proc.Sync, add a delay between the proc of this ability and any sync ability listening to this one. ProcSound string null Play a sound cue when ability procs (details) ProcTAS List<string> null String Ids of temporary animated sprites to show when the ability activates. For most abilities, this TAS is drawn shown relative to the farmer. For Hitscan/Projectile, this TAS is shown on the targeted monster instead. ProcOneshotAnim string null Play the matching anim clip on proc, return to normal animation after 1 cycle. ProcSpeechBubble string null Show the matching speech bubble on proc. ProcAltVariant string null Switch the companion to the matching alt variant on proc. Use \"RECHECK\" to switch ProcChatterKey string null On the next activation of a Chatter ability, use this key instead of the normal conditional key. Condition string null A game state query that must pass before proc. DamageThreshold int -1 Must receive or deal this much damage before proc. For ReceiveDamage & DamageMonster IsBomb bool? null Must deal damage with(true)/not with(false) a bomb. For DamageMonster & SlayMonster IsCriticalHit bool? null Must (true)/must not(false) deal a critical hit. For DamageMonster & SlayMonster InCombat bool? null Must (true)/must not(false) be in combat. \"In combat\" is defined as monsters in the same location, and having dealt or taken damage in the last 10 seconds. Args Dictionary varies Arguments specific to an ability class, see respective page for details. Ability Descriptions Abilities are internally 0-indexed, but the displayed minimum ability can be changed in TinkerData Then there are multiple abilities per level and a description for each, they will be joined with new line before passed to description template. It's not neccesary to provide descriptions to all abilities in a level, often it is sufficient to describe the entire ability in 1 description on the first ability, while leaving the others blank. Example of a description template for a trinket with 2 ability levels: // Trinket \"Description\": \"My trinket {0}:\\n====\\n{1}\" // Tinker \"MinLevel\": 2 // Tinker Abilities [ [ // rest of ability omitted {\"Description\": \"first ability A\", ...}, {\"Description\": \"second ability B\", ...}, ], [ // rest of ability omitted {\"Description\": \"first ability C\", ...}, {\"Description\": \"second ability D\", ...} ] ] Description when trinket has internal level 0: My trinket 2: ==== first ability A second ability B Description when trinket has internal level 1: My trinket 3: ==== first ability C second ability D"
  },
  "guide/4.0-Proc.html": {
    "href": "guide/4.0-Proc.html",
    "title": "Proc | TrinketTinker",
    "keywords": "Proc Proc determines when an ability activate, kind of like the trigger in a trigger action. The word \"proc\" is gamer slang for \"activate\", used because it's only 4 letters long. The Proc value is not the only factor on whether ability will activate. It must pass any timeout and conditions listed in abilites. In content patcher, use a string value like \"Proc\": \"Always\" to set this value. Internally it is an enum. ProcOn Always Activate the ability once on equip, deactivate it on unequip. The game will unequip and reequips all trinkets on a new day, causing any Always effect to activate again. Sync Activate the ability when another ability on the same level activates. By default this follows the first ability (index 0) and can be changed by setting ProcSyncIndex to a different number. Footstep When the player walks around. ReceiveDamage When the player is damanged. Checks if damage taken is greater than DamageThreshold. DamageMonster When the player damages a monster. Checks if damage dealt is greater than DamageThreshold, and if IsBomb & IsCriticalHit matches the damage. SlayMonster When the player slays a monster. Checks if damage dealt is greater than DamageThreshold, and if IsBomb & IsCriticalHit matches the damage. Timer When timer elapses, must set ProcTimer to use. Trigger When the action \"mushymato.TrinketTinker_ProcTrinket\" is called. If the unqualified trinket Id is given (e.g. \"mushymato.TrinketTinker_ProcTrinket MyTrinket\"), only the specified trinket's ablities will proc. Warped When the player warps/moves to another map. Interact Activate when the player presses the configured keybinding while their bounding box overlaps with the companion's bounding box."
  },
  "guide/4.z-Ability Classes.html": {
    "href": "guide/4.z-Ability Classes.html",
    "title": "| TrinketTinker",
    "keywords": ""
  },
  "guide/4.z.000-Nop.html": {
    "href": "guide/4.z.000-Nop.html",
    "title": "Nop | TrinketTinker",
    "keywords": "Nop Counts as an ability proc for purpose of generic ability proc effects, but otherwise does nothing. Ability Fields that are Proc Effects Refer to abilities page for details. ProcSound ProcTAS ProcOneshotAnim ProcSpeechBubble ProcAltVariant ProcChatterKey In addition, this ability can be used to chain into more abilities that target it with ProcSyncIndex, optionally with a ProcSyncDelay."
  },
  "guide/4.z.001-Buff.html": {
    "href": "guide/4.z.001-Buff.html",
    "title": "Buff | TrinketTinker",
    "keywords": "Buff Applies a buff to the player. Must be a buff registered in Data/Buffs, no support for inline buffs. Normally buffs expire when sleeping, but due to trinket mechanics this buff is reapplied every morning. Args Property Type Default Notes BuffId float 0 String id of buff to apply."
  },
  "guide/4.z.002-Health.html": {
    "href": "guide/4.z.002-Health.html",
    "title": "Health | TrinketTinker",
    "keywords": "Health Recover some amount of HP. If Min and Max are negative, this ability will damage the player instead. Args Property Type Default Notes ValueMode ValueMode \"Percent\" Treat the range as either percent or a true value Min double 0 Minimum value. Max double 0 Maximum value."
  },
  "guide/4.z.003-Stamina.html": {
    "href": "guide/4.z.003-Stamina.html",
    "title": "Stamina | TrinketTinker",
    "keywords": "Stamina Recover some amount of energy. If Min and Max are negative, this ability will drain the player's energy instead. Args Property Type Default Notes ValueMode ValueMode \"Percent\" Treat the range as either percent or a true value Min double 0 Minimum value. Max double 0 Maximum value."
  },
  "guide/4.z.004-Hitscan.html": {
    "href": "guide/4.z.004-Hitscan.html",
    "title": "Hitscan | TrinketTinker",
    "keywords": "Hitscan Do damage to a monster within range, can roll criticals, explode, and apply stun/knockback. Args Property Type Default Notes Min int 0 Minimum damage dealt. Max int 0 Maximum damage dealt. Range int 64 Pixel range for finding monster to target. Knockback float 0 Knockback modifier in %. Precision int 0 Precision, doesn't do much unless monster has dodge rate. CritChance float 0 Chance to roll a critical hit. CritDamage float 0 Modifier to critical hit damage. StunTime int 0 Milisecond time to stun the enemy. StunTAS string null Show this temporary animated sprite while the enemy is stunned, calculate loop from stun time instead of loop value set in the TAS asset. When used with Projectile, the TAS's rotation is also overwritten with the projectile's rotation. HitTAS string null Show this temporary animated sprite on hit. When used with Projectile, the TAS's rotation is also overwritten with the projectile's rotation. Hits int 0 Number of hits to apply at once (or with a delay), monsters do not get iframes from extra hits. HitsDelay int 0 Milisecond delay between hits, does nothing if Hits=0. ExplodeRadius int 0 Generate a explosion with this radius on hit, farmer will take damage from it. Might damage another monster, but the monster that got hit would be in iframe at this point. Filters List<string> null List of monster types to avoid targeting."
  },
  "guide/4.z.005-Projectile.html": {
    "href": "guide/4.z.005-Projectile.html",
    "title": "Projectile | TrinketTinker",
    "keywords": "Projectile Do damage to a monster within range using a projectile. Can roll criticals and apply stun/knockback. Args Property Type Default Notes Texture string \"TileSheets/Projectiles\" Path to custom projectile texture. SpriteIndex int 0 Sprite index of projectile. SpriteWidth int 16 Projectile sprite width. SpriteHeight int 16 Projectile sprite height. TailCount int 0 Number of echo/trail sprites to draw. MinVelocity float 12 Starting projectile velocity. MaxVelocity float -1 Maximum projectile velocity, -1 if unbounded. Acceleration float 1 Velocity increase per tick. Pierce int 1 Number of times the projectile can collide (with enemy object or terrain) before it is destroyed. IgnoreObjectCollisions bool false Allow projectile to pass through object/terrain. IgnoreLocationCollisions bool false Allow projectile to pass through walls. Homing bool false Recheck target and adjust trajectory midflight. *and all arguments of Hitscan"
  },
  "guide/4.z.006-HoeDirt.html": {
    "href": "guide/4.z.006-HoeDirt.html",
    "title": "HoeDirt | TrinketTinker",
    "keywords": "HoeDirt Create tilled soil in random tiles around the companion. Args Property Type Default Notes Range int 1 Tile radius around companion, 0 for the tile the companion is on, 1 for 3x3, 2 for 5x5, and so on. Count int 1 Number of tiles to randomly choose each time. Watering bool false Water the newly hoed dirt, will not water existing dirt."
  },
  "guide/4.z.007-ItemDrop.html": {
    "href": "guide/4.z.007-ItemDrop.html",
    "title": "ItemDrop | TrinketTinker",
    "keywords": "ItemDrop Drops an item, picked with item query. Args Property Type Default Notes HarvestTo HarvestDestination Player Where to send the spawned item. SearchMode ItemQuerySearchMode \"RandomOfTypeItem\" Determine how the final item is picked from results. *Also accepts all members of GenericSpawnItemData, which is the usual item spawn fields minus Condition. Use the Condition field on ability instead. HarvestTo This arg determines where the spawn item is sent to. None: The item is lost into the void Debris: A dropped item/debris is created and can be collected by the player Player: An item is added to the player inventory, if space allows. Otherwise the item either becomes debris. TinkerInventory: An item is added to the trinket's inventory, if space allows. Otherwise the item either becomes debris."
  },
  "guide/4.z.008-Harvest.html": {
    "href": "guide/4.z.008-Harvest.html",
    "title": "Harvest | TrinketTinker",
    "keywords": "Harvest There are several Harvest type abilities that generally \"harvest\" things from the world. Each share the same arguments and have similar behavior, but target different harvestable things. Companions can be set to seek nearby harvestable targets using anchors, refer to below table for corresponding anchor mode. Name Anchor Notes \"HarvestCrop\" \"Crop\" Harvest ready crops. \"HarvestForage\" \"Forage\" Harvest forage items. \"HarvestStone\" \"Stone\" Harvest breakable stone and ores. \"HarvestShakeable\" \"Shakeable\" Harvest shakeable things (tree, fruit tree, bush). Will not harvest golden walnut bush. \"HarvestTwig\" \"Twig\" Harvest twig debris. \"HarvestWeed\" \"Weed\" Harvest weeds debris. \"HarvestDigSpot\" \"DigSpot\" Harvest dig spots (artifact spot or seed spot). Args Property Type Default Notes Range int 1 Tile radius around companion, 0 for the tile the companion is on, 1 for 3x3, 2 for 5x5, and so on. Count int 1 Number of tiles to check for activation within the radius. HarvestTo HarvestDestination Player Where to send the harvested item. Filters List<string> null Filter string arguments. HarvestTo This arg determines where the harvested item is sent to. None: The item is lost into the void Debris: A dropped item/debris is created and can be collected by the player Player: An item is added to the player inventory, if space allows. Otherwise the item either becomes debris or is not harvested (Forage). TinkerInventory: An item is added to the trinket's inventory, if space allows. Otherwise the item either becomes debris or is not harvested (Forage). Filters This arg allows certain harvestable targets to be excluded, exact effect depends on ability type. If an ability is not listed here, then it has no support for filters. \"HarvestCrop\" & \"HarvestForage\": List of context tags to avoid harvesting, e.g. \"category_flowers\" (exclude flower category) or \"color_orange season_summer\" (exclude orange and summer). Each space separated sub list of tags act as AND while the overall list act as OR. \"HarvestShakeable\": Take list of \"Bush\", \"Tree\", \"FruitTree\", indicating which of the 3 possible categories to avoid shaking."
  },
  "guide/4.z.100-Action.html": {
    "href": "guide/4.z.100-Action.html",
    "title": "Action | TrinketTinker",
    "keywords": "Action Run an registered action, either vanilla or mod provided. ActionEnd and ActionsEnd are relevant when ProcOn is Always. These end actions are called when the player unequips a trinket, or overnight when the game unequip and reequips the trinket. Args Property Type Default Notes Action string null An action to run, either this or Actions must be set for the ability to work. Actions List<string> null Additional actions to run, either this or Action must be set for the ability to work. ActionEnd string null An action to run when the trinket is unequiped, only used if ProcOn is Always. ActionsEnd List<string> null Additional actions to run when the trinket is unequiped, only used if ProcOn is Always. For SMAPI Mods The actions triggered by this ability have special TriggerActionContext.CustomFields values which can be used from custom actions. Key Type Notes mushymato.TrinketTinker/Trinket StardewValley.Objects.Trinkets.Trinket The trinket which owns the ability that ran this action. mushymato.TrinketTinker/Owner StardewValley.Farmer The farmer who equipped the trinket. mushymato.TrinketTinker/Position Microsoft.Xna.Framework.Vector2 The position of the companion, or null if there is no companion. mushymato.TrinketTinker/PosOff Microsoft.Xna.Framework.Vector2 The position of the companion plus the visual offset, or null if there is no companion. mushymato.TrinketTinker/Data TrinketTinker.Models.AbilityData The trinket ability data model, this is not converted by pintail so you must use reflection to access any fields, fragile. These custom fields provide a way for C# mods to implement their own ability effects as actions, which can then be put into trinket tinker."
  },
  "guide/4.z.101-BroadcastAction.html": {
    "href": "guide/4.z.101-BroadcastAction.html",
    "title": "BroadcastAction | TrinketTinker",
    "keywords": "BroadcastAction Run an registered action, either vanilla or mod provided, on another player. This is a specialized version of Action meant for niche cases where a particular action only properly works on the host, or if the trinket should effect another player and not the main player. Args Property Type Default Notes Condition string required A game state query, checked on the remote player actually running the action. PlayerKey string required Players to target, accepts these values: All: run action on all players Host: run action on the host player *and all arguments of Action For SMAPI Mods Unlike Action, BroadcastAction does not provide custom fields provided for modded actions to use."
  },
  "guide/4.z.102-RaiseTrigger.html": {
    "href": "guide/4.z.102-RaiseTrigger.html",
    "title": "RaiseTrigger | TrinketTinker",
    "keywords": "RaiseTrigger Raise the trigger \"mushymato.TrinketTinker/TrinketProc\". The trigger action handler will recieve player and location (nullable), as well as the trinket item as both targetItem and inputItem. Can have niche uses, but it is generally better to directly call the registered delegate with the Action ability. Args No additional arguments."
  },
  "guide/4.z.200-EquipTrinket.html": {
    "href": "guide/4.z.200-EquipTrinket.html",
    "title": "EquipTrinket | TrinketTinker",
    "keywords": "EquipTrinket This ability requires inventory to use, and can only be used with Proc Always. Only 1 EquipTrinket ability can exist per level, and having this ability changes this trinket's inventory to only accept trinkets (that do not have inventory). Inventory cannot be opened while this trinket is equippped. The reason for all the special caveats is because this ability turns a trinket into a holder for additional trinkets. By equipping this trinket, all trinkets within the inventory of this trinket is also equipped. For mod authors, your trinket can be explictly banned from this ability with a Data/Trinkets custom field. { \"Action\": \"EditData\", \"Target\": \"Data/Trinkets\", \"Entries\": { \"{{ModId}}_YourOPTrinket\": { \"Id\": \"{{ModId}}_YourOPTrinket\", // other fields omitted... \"CustomFields\": { // prevent this trinket from being equipped indirectly via EquipTrinket and the trinket equip action. \"mushymato.TrinketTinker/DirectEquipOnly\": \"T\" } }, } } Args No additional arguments."
  },
  "guide/4.z.201-Chatter.html": {
    "href": "guide/4.z.201-Chatter.html",
    "title": "Chatter | TrinketTinker",
    "keywords": "Chatter This ability is used to activate Chatter dialogue, which produces full dialogue boxes much like NPC dialogue. Chatter data is stored on the tinker asset, as Dictionary<string, ChatterLinesData>, while the portrait, NPC, or display name is stored with variants. On ability activation, one set of ChatterLinesData will be picked based on priority and Condition, then one line out of the list will be chosen. Args Property Type Default Notes ChatterPrefix string null A string prefix, used to filter for a specific group of ChatterLinesData by their keys. Relevant Variant Data Property Type Default Notes Portrait string null A portrait texture, required to display a portrait and a name. NPC string null An NPC name (key of Data/Characters) to associate this variant with, used to derive the display name. Name string null A display name, used if there's no NPC. The reason why Portrait/NPC/Name is stored with variants is so that you can associate portraits with their sprite, much like the appearance system in vanilla. For trinkets that are meant to be a real NPC (or has at least an anti-social NPC entry), using the NPC field is preferred as it will make the dialogue box compatible with portraiture. ChatterLinesData Property Type Default Notes Condition string \"TRUE\" A game state query used to check if this chatter should be picked. If you want to have chatter exclusively activate through ability with ProcChatterKey, use \"FALSE\". Priority int 0 Sort priority of this chatter, higher number have their conditions checked first. Lines List<string> null List of dialogue for this entry, this can be: literal dialogue (and i18n token) translation key (e.g. Characters/Dialogue/Abigail:Introduction) tokenized text Responses Dictionary<string, string> null Response keys, needed only if your dialogue has $q that point to responses. Choosing the next Dialogue Line The Chatter system has nothing to do with the vanilla NPC dialogue keys beyond ability to reuse the same strings via translation key. If the previous dialogue has not finished (i.e. $e is used), finish that dialogue first. If a ProcChatterKey has been set and exists, skip the rest of the steps and pick that Chatter. Chatter data is sorted by Priority (highest to lowest) The first Chatter data that fits these conditions is picked: Key starts with ChatterPrefix (if set) Condition evaluates to true There are at least 1 Lines in this Chatter A random dialogue from Lines is chosen, with equal chance, it can repeat. Using $q in Chatter Question depend on having key'd responses. To utilize this with Chatter, question goes in Lines, while matching response keys go in Responses. (The following example is adapted from the official wiki) Example: \"DialogueWithQuestion\": { \"Lines\": [ \"I think I'll go to the beach tomorrow!#$q 305/306 beachquestion_followup#Would you like to go with me?#$r 305 15 beachquestion_yes#Sure, I would love to!#$r 306 0 beachquestion_sorry#Oh, sorry, I've already made plans with someone else...#$r 306 -10 beachquestion_no#No thank you.\" ], \"Responses\": { \"beachquestion_yes\": \"Good! It's a date.$h\", \"beachquestion_sorry\": \"Oh. Darn. Okay.$6\", \"beachquestion_no\": \"Oh. Um. Sorry.$s\", \"beachquestion_followup\": \"$p 305#Tomorrow should be a lot of fun!$h|Hmm, I wonder if I can get someone to go with me...$s\", } } Response keys are remembered, so after the first time the question is asked and answered, dialogue box will fall back to beachquestion_followup instead of offering choices."
  },
  "guide/5-Inventory.html": {
    "href": "guide/5-Inventory.html",
    "title": "Inventory | TrinketTinker",
    "keywords": "Inventory Trinkets can have inventory, which can be opened by \"using\" the trinket item. This menu can also be accessed when the trinket is equipped via a keybinding. This inventory can accept most items except for itself and other trinkets that have inventory. Further control of what is allowed into an inventory can be achieved through RequiredTags and RequiredItemCondition. Should the trinket item be lost, all items inside will be sent to the lost and found on the next day. There's a number of caveats when using inventory with EquipTrinket, refer to that page for details. Structure Property Type Default Notes Capacity int 9 Capacity of the inventory. OpenCondition string null A game state query used to check if this inventory can be opened. RequiredTags string null A list of context tags used to check if an item should be allowed into the inventory. Each space separated sub list of tags act as AND while the overall list act as OR. RequiredItemCondition string null A game state query used to check if an item should be allowed into the inventory. The item being checked will be provided as the Input and Target."
  },
  "guide/6-Temporary Animated Sprite.html": {
    "href": "guide/6-Temporary Animated Sprite.html",
    "title": "Temporary Animated Sprite | TrinketTinker",
    "keywords": "Temporary Animated Sprite Temporary animated sprites are ways to show animated effects on screen temporarily. They existed prior to 1.6, but was given a proper data model to use in Data/Machines. For trinket tinker, any field that calls for temporary animated sprites takes string ids corresponding to an entry in mushymato.TrinketTinker/TAS rather than the full definition. This let you reuse the same TAS in multiple places. TemporaryAnimatedSpriteDefinition Note TemporaryAnimatedSpriteDefinition is a class provided by the game, not defined by this mod. Property Type Default Notes Id string required Unique string id Condition string null Game state query, show TAS if true. Texture string required Texture asset name. SourceRect Rectangle required Area of texture to draw. Interval float 100 Time between frames, in miliseconds. Frames int 1 Length of the animation. Loops int null Number of times to repeat the animation. PositionOffset Vector2 Vector2.Zero Offset added to position during draw. Flicker bool null Skips drawing every other frame. Flip bool false Horizontally flip the sprite during draw. SortOffset float null Offset on layer depth, for determining whether this sprite appear over or under other sprites. AlphaFade float null Amount of additional transparency every frame. Set this to make the sprite fade away over time. Scale float 1f Draw scale, applied on top of the default 4x scale. ScaleChange float null Amount of additional scale every frame. Set this to make sprite enlarge/shrink over time. Rotation float null Amount of rotation on the sprite. RotationChange float null Amount of additional rotation every frame. Set this to make the sprite spin. Color string null Color to apply on draw, for use with grayscale sprites. Aside from RGB and hex values, monogame accepts named colors."
  },
  "guide/7-Utility.html": {
    "href": "guide/7-Utility.html",
    "title": "Utility | TrinketTinker",
    "keywords": "Utility Extra non-trinket features provided by this mod. See sub pages for more specific topics. Data/Location CustomFields Aside from conditions defined on a particular trinket, it's also possible to disable trinket features for a whole location using CustomFields. \"mushymato.TrinketTinker/disableAbilities\": true|false Disable trinket abilities while owner is in the location (except for always active abilities). \"mushymato.TrinketTinker/disableCompanions\": true|false Disable companion display while owner is in the location. Their position updates continue. Console Commands tt_draw_debug This command toggles drawing of companion sprite index and bounding box of both the companion and the farmer () This command toggles some debug drawing options: Companion sprite index: a sprite index will be drawn over the companion as they animate. This sprite index is positioned at the companion's \"position\". Companion bounding box: a magenta box is drawn around the companion, showing the zone used for Interact proc type and for NoOverlap Lerp motion. tt_unequip_trinket Force unequip all trinkets and send the unequipped trinkets to lost and found. Mainly useful if a mod fails to properly remove their trinkets."
  },
  "guide/7.0-Item Queries.html": {
    "href": "guide/7.0-Item Queries.html",
    "title": "Item Queries | TrinketTinker",
    "keywords": "Item Queries Item queries produce new item(s), they are most commonly used in shops and machine output rules (but are valid in many more places). mushymato.TrinketTinker_CREATE_TRINKET mushymato.TrinketTinker_CREATE_TRINKET <trinket id> [level] [variant] Create a new trinket item. If the trinket has tinker data, set level and variant. Useful for producing a trinket at specified level/variant. Setting level or variant to \"R\" will randomize the level or variant. mushymato.TrinketTinker_CREATE_TRINKET_ALL_VARIANTS mushymato.TrinketTinker_CREATE_TRINKET_ALL_VARIANTS <trinket id> [level] Create all variants of a trinket (with tinker data). Useful for making a shop sell all variants of a trinket instead of making the player roll for them. Setting level to \"R\" will randomize the level once, and then set trinkets created by this query to that level. mushymato.TrinketTinker_HIRE_TRINKET mushymato.TrinketTinker_HIRE_TRINKET <trinket id> This is a special item query for use in shops only, it creates a placeholder trinket and serves as a base for mushymato.TrinketTinker_EquipHiddenTrinket. Example: // \"Target\": \"Data/Shops\", \"TargetField\": [ \"AdventureShop\", \"Items\" ] \"{{ModId}}_TrinketForHire\": { \"Id\": \"{{ModId}}_TrinketForHire\", \"ItemId\": \"mushymato.TrinketTinker_HIRE_TRINKET {{ModId}}_TrinketForHire\", \"Price\": 6000, \"ObjectDisplayName\": \"Hire this merc for 1 day!\", \"Condition\": \"!PLAYER_HAS_TRINKET Current {{ModId}}_TrinketForHire\", \"ActionsOnPurchase\": [ \"mushymato.TrinketTinker_EquipHiddenTrinket {{ModId}}_TrinketForHire 0 0 1\" ] },"
  },
  "guide/7.1-Game State Queries.html": {
    "href": "guide/7.1-Game State Queries.html",
    "title": "Game State Queries | TrinketTinker",
    "keywords": "Game State Queries Game state queries are expressions that return true or false, they can be used in various Condition fields in both TrinketTinker and elsewhere in game. Though the game state queries added by trinket tinker are very specific in their use case. mushymato.TrinketTinker_IS_TINKER mushymato.TrinketTinker_IS_TINKER <Input|Target|ItemId> [level compare] [variant compare] Check if the item indicated by key is a trinket with tinker data and has a certain amount of level and a certain amount of variant. The argument format here is shared by other trinket tinker GSQ arguments of the same style. Trinket Item <Input|Target|ItemId> Input: This is the input item from a machine trigger rule. For trinket tinker conditions, this will usually be the trinket item. Output: This is the target item, which is more general. For trinket tinker conditions, this will usually be the trinket item. ItemId: This is a item id (best if qualified). A new instance of the item will be created and checked against condition, which means level 0 and variant 0 in context of trinkets from trinket tinker. Compare Notation Level compare and Variant compare in this GSQ take a compare operation with format of [Operator][Compare Value], e.g. <=1 for less than or equal to 1. Valid operators: >, >=, <, <=, == (& =), !=. The compare value is an integer (i.e. 2, not 2.5). Can also use M for maximum unlocked level/variant. To skip level and only compare variant (or vice versa), use ? for level. Other arguments marked \"compare\" used the same syntax. mushymato.TrinketTinker_ENABLED_TRINKET_COUNT mushymato.TrinketTinker_ENABLED_TRINKET_COUNT <Input|Target|ItemId> <playerKey> <equip count compare> Count and compare the number of trinkets of a specific Id that had been equipped and enabled across targeted players. This allows a trinket to be restricted to only 1 user at a time, e.g. \"EnableCondition\": \"mushymato.TrinketTinker_ENABLED_TRINKET_COUNT Target All <1\". mushymato.TrinketTinker_IN_ALT_VARIANT mushymato.TrinketTinker_IN_ALT_VARIANT <Input|Target> <altVariantKey> Check if the trinket item has companions and is currently in a specific altVariantKey, or \"BASE\" to check if the companion is not an an alt variant. Only works in context where the Input/Target item is a trinket with tinker data, does not support string trinket Id. mushymato.TrinketTinker_TRINKET_HAS_ITEM mushymato.TrinketTinker_TRINKET_HAS_ITEM <Input|Target> <itemId> <item count compare> Check if the trinket item has an inventory and the inventory has a certain number of the given item. Only works in context where the Input/Target item is a trinket with tinker data, does not support string trinket Id. mushymato.TrinketTinker_HAS_LEVELS mushymato.TrinketTinker_HAS_LEVELS <Input|Target|ItemId> Check if the trinket item has at least 2 unlocked levels, primarily for usage in machines. mushymato.TrinketTinker_HAS_VARIANTS mushymato.TrinketTinker_HAS_VARIANTS <Input|Target|ItemId> Check if the trinket item and has at least 2 unlocked variants, primarily for usage in machines."
  },
  "guide/7.2-Actions.html": {
    "href": "guide/7.2-Actions.html",
    "title": "Actions | TrinketTinker",
    "keywords": "Actions Actions, sometimes called trigger actions, are little snippets of behavior that can be called in places that support action. Trinket Tinker provide these special actions. mushymato.TrinketTinker_EquipHiddenTrinket mushymato.TrinketTinker_EquipHiddenTrinket <trinket id> [level] [variant] [daysDuration] Equips a hidden trinket to the player. This trinket does not occupy the trinket slot, and does not require combat mastery. Just like EquipTrinket, the custom field mushymato.TrinketTinker/DirectEquipOnly can be used to exclude your trinket from being equipped by this action. Level and Variant default to 0 and can be specified, randomize (\"R\") is not supported yet. By default, daysDuration is 1, meaning the hidden trinket is removed automatically after sleeping once. They can be made permanent with -1, and will stay until explicitly removed with the following action. mushymato.TrinketTinker_UnequipHiddenTrinket mushymato.TrinketTinker_UnequipHiddenTrinket <trinket id> [level] [variant] Unequip a hidden trinket, optionally matching for a specific level and variant. If the player has multiple copies of a trinket that matches ID (and level/variant if specified), the most recently equipped hidden trinket is removed first. mushymato.TrinketTinker_ProcTrinket mushymato.TrinketTinker_ProcTrinket <trinket id> [level] [variant] Activates all abilities with Proc=Trigger, filtered to only trinkets of matching ID if it is specified. This is a niche case, primarily for bespoke logic implemented in SMAPI mods."
  },
  "guide/7.3-Trinket Colorizer and Anvil.html": {
    "href": "guide/7.3-Trinket Colorizer and Anvil.html",
    "title": "Trinket Colorizer and Anvil | TrinketTinker",
    "keywords": "Trinket Colorizer and Anvil Machines are provided for the purpose of rerolling/upgrading trinkets. Trinket Colorizer The trinket colorizer is a big craftable machine that can be purchased from the Blacksmith for 50 Gold Bars once the Anvil recipe is obtained. Trinkets must have at least 2 variants and CanBeReforged set to true in order to use the colorizer. Consumes 15 Omni Geode to reroll the variant on a TrinketTinker trinket, no effect on vanilla trinkets. The colorizer will never roll the same variant twice in a row. Anvils have similar rule applied to them for TrinketTinker trinkets. Implementation wise, the colorizer is a standard big craftabe machine with qualified ID (BC)mushymato.TrinketTinker_TrinketColorizer and a complex output machine rule. Mods are free to add more ways to obtain this machine and prepend the colorizer with special upgrade rules for their trinkets. Anvil Trinket tinker does not use vanilla Anvil's level reroll logic and instead uses a custom output method. Trinkets must have at least 2 levels and CanBeReforged set to true in order to use the anvil. The cost is 3 iridium bars, just like vanilla. Adding Custom Machine Rules for Upgrades This example assumes you already know how to add a new machine rule. To add your own machine rule for upgrading trinkets add a new OutputRules entry like so: \"{{ModId}}_YourTrinket_Rule\": { \"Id\": \"{{ModId}}_YourTrinket_Rule\", \"Triggers\": [ { \"Id\": \"{{ModId}}_YourTrinket_Rule_ItemPlacedInMachine\", \"Trigger\": \"ItemPlacedInMachine\", // Require a specific trinket \"RequiredItemId\": \"(TR){{ModId}}_YourTrinket\", \"RequiredCount\": 1, \"Condition\": \"mushymato.TrinketTinker_IS_TINKER Input ? <=M\" } ], \"OutputItem\": [ { \"Id\": \"{{ModId}}_YourTrinket_Rule_Output\", // Use output method \"OutputMethod\": \"TrinketTinker.Extras.TrinketColorizer, TrinketTinker:OutputTrinketColorizer\", // The Anvil OutputMethod is \"TrinketTinker.Extras.TrinketColorizer, TrinketTinker:OutputTinkerAnvil\" \"CustomData\": { // Instead of rerolling, add 1 to variant \"mushymato.TrinketTinker/Variant+\": 1, // Same as above, for level \"mushymato.TrinketTinker/Level+\": 1, } } ] } If you are adding this to the trinket colorizer or the anvil, you will need to move your rule above the default rule provided by trinket tinker. \"MoveEntries\": [ { \"Id\": \"{{ModId}}_StatiColorMask_Output\", // Same ID for both Anvil and Trinket Colorizer \"BeforeID\": \"mushymato.TrinketTinker_Default\" } ] Aside from using OutputMethod, you may also use item query mushymato.TrinketTinker_CREATE_TRINKET, it just won't be able to increment the level."
  },
  "guide/8-For SMAPI Mods.html": {
    "href": "guide/8-For SMAPI Mods.html",
    "title": "For SMAPI Mods | TrinketTinker",
    "keywords": "For SMAPI Mods Trinket Tinker has no API at the moment as it is primarily meant to be interacted with a content editing framework like Content Patcher. Still, trinket tinker may not have implemented everything you need, here are ways SMAPI mods can interface with Trinket Tinker. Custom Trigger Action in Ability Action As mentioned in the Action ability, TriggerActionContext.CustomFields has custom values are provided for usage with custom actions. Key Type Notes mushymato.TrinketTinker/Trinket StardewValley.Objects.Trinkets.Trinket The trinket which owns the ability that ran this action. mushymato.TrinketTinker/Owner StardewValley.Farmer The farmer who equipped the trinket. mushymato.TrinketTinker/Position Microsoft.Xna.Framework.Vector2 The position of the companion, or null if there is no companion. mushymato.TrinketTinker/PosOff Microsoft.Xna.Framework.Vector2 The position of the companion plus the visual offset, or null if there is no companion. mushymato.TrinketTinker/Data TrinketTinker.Models.AbilityData The trinket ability data model, this is not converted by pintail so you must use reflection to access any fields, fragile. These custom fields provide a way for C# mods to implement their own ability effects as actions, which can then be put into trinket tinker. Once again, BroadcastAction do not benefit from these custom fields. Trigger Action The action mushymato.TrinketTinker_ProcTrinket <trinket id> can be run with TriggerActionManager.TryRunAction to activate an equipped trinket's Proc=Trigger ablities. The TriggerContext provided to the action will be passed through to any action ran by Action ability. If TriggerContext.CustomFields is not null, trinket tinker will fill in the aformentioned custom fields for the TriggerContext. To ensure CustomFields is not null, call the action like this: CachedAction action = TriggerActionManager.ParseAction($\"mushymato.TrinketTinker_ProcTrinket {DesiredTrinketId}\"); TriggerActionContext context = new($\"{YourModId}_WhateverSuffix\", [], null, []); if (!TriggerActionManager.TryRunAction(action, context, out string error, out Exception _)) { // Do any error handling/logging } Game State Query Context To have greater control over trinket abilities, you can define custom Game State Queries for use with your trinkets. The following Condition fields get the trinket item as both the Input and Target items on their GameStateQueryContext. Ability Condition Chatter Condition Inventory OpenCondition TinkerData EnableCondition AbilityUnlockConditions VariantUnlockConditions Other cases of Condition either do not provide this, or only use something else for Input and Target items (e.g. Inventory.RequiredItemCondition) Implementing Entirely new Motions/Abilities While it's possible to do this by hard DLL reference, it's not recommended as implementation details may change at the author's digression. Compatibility Trinkets are equippped onto the player by appending to Farmer.trinketItems, which is a list of trinkets. Normally this list only ever has 1 trinket, but trinket tinker will add indirectly equipped trinkets to the list as well. These trinkets have mod data set to: mushymato.TrinketTinker/IndirectEquip = \"T\" All indirectly equipped trinkets has this field set. mushymato.TrinketTinker/HiddenEquip = \"integer\", if this trinket is equipped using mushymato.TrinketTinker_EquipHiddenTrinket then this value is the number of days left before the trinket will be Please leave my Special compatiblity is done for bcmpinc.WearMoreRings, indirect trinkets will be inserted after trinket 2."
  },
  "guide/9-User Configuration.html": {
    "href": "guide/9-User Configuration.html",
    "title": "User Configuration | TrinketTinker",
    "keywords": "User Configuration Most things in trinket tinker are for mod authors of specific content mods to decide, while these settings are universal for all trinket tinker mods and up to the user to set. Keybindings Property Type Default Notes DoInteractKey KeybindList LeftAlt+MouseRight, LeftStick+ControllerA Press this key to interact with your companion, while you are close enough. OpenTinkerInventoryKey KeybindList RightAlt+OemPeriod, LeftStick+ControllerX Press this key to open the inventory of your equipped trinket(s). TinkerInventoryNextKey KeybindList RightAlt+OemPeriod, LeftStick+ControllerX While a Tinker Inventory is open and multiple trinkets with inventory are equipped, press this to go to the next inventory. TinkerInventoryPrevKey KeybindList RightAlt+OemPeriod, LeftStick+ControllerX While a Tinker Inventory is open and multiple trinkets with inventory are equipped, press this to go to the previous inventory. Debug Property Type Default Notes DrawDebugMode bool false Enable/Disable draw debug mode."
  },
  "index.html": {
    "href": "index.html",
    "title": "TrinketTinker - Stardew Valley Trinket Framework | TrinketTinker",
    "keywords": "TrinketTinker - Stardew Valley Trinket Framework This is a framework for creating trinkets that can have advanced abilities using just Content Patcher. What can this framework do? Animated companions with various movement patterns. A skin system (variants) for companions, and related features to set/change companion variants Dynamic event based abilities that work through the companions rather than the player. Support for custom effects from other C# mods, through the use of actions. Have the player obtain trinket effects without actually having the trinket slot unlocked, through the use of special trigger actions. If you are looking to make mods using this framework, start here. This mod is licensed under MIT, contributions are welcome. Example Mods for TrinketTinker [CP] Sinister Servants: Playable mod for TrinketTinker, adds 6 monster trinkets. [CP] Pack Possum and Critter Cages: Playable mod for TrinketTinker, adds 3 \"box\" trinkets that hold more trinkets, and a hireable opossum. [CP] Abigail Axcellent Adventure: Example mod for a NPC style trinket, which are unique across the world and hides the corresponding NPC. [CP] Trinket Tinker Examples: Test mod, a bit messy. User Configuration These keybinds are shared across mods using this framework, for the user to set to their liking. Do Interact Key: Press this key to interact with your companion, while you are close enough. Open Tinker Inventory Key: Press this key to open the inventory of your equipped trinket(s). Tinker Inventory Next Key: While a Tinker Inventory is open and multiple trinkets with inventory are equipped, press this to go to the next inventory. Tinker Inventory Prev Key: While a Tinker Inventory is open and multiple trinkets with inventory are equipped, press this to go to the previous inventory. Translations English default.json Simplified Chinese zh.json French fr.json (by Caranud) Credits Documentation generated with Docfx, with docfx-material theme. Changelog All notable changes to this project will be documented here. The format is based on Keep a Changelog, and this project adheres to Semantic Versioning. 1.5.5 Changed MoveSync now only sync movement with owner when anchor mode is owner, use MoveSyncAll for old behavior. Serpent alt segment layer depth changes to make them consistent, this is entirely by vibes and implementation detail subject to change Fixed HarvestTo TrinketInventory not harvesting custom bush drops properly Temporary Animated Sprite now checks Condition, if given 1.5.4 Added Several more Harvest* abilities, and matching AnchorTarget HarvestTwig & AnchorTarget Twig HarvestWeed & AnchorTarget Weed HarvestDigSpot * AnchorTarget DigSpot Fixed Separated position from offset to make companions better at harvesting things at Range=0 HarvestCrop only harvesting to player inventory Jittery movement on Lerp with no overlap and velocity = -2 is now wobbly movement Content patcher consistently apply on equipped trinkets 1.5.3 Added Ability ProcSyncId is like ProcSyncIndex, but uses the Id to find what to Sync. Fixed Null handling on add item to tinker inventory Nop ignoring timer Regression on global inventory cleanup Fixed Crash on saving with more than 10 trinkets equipped Duplicating vanilla trinket companions 2 1.5.2 Added HitTAS for Hitscan/Projectile, apply a TAS at the target on hit. HitsDelay for Hitscan/Projectile, adds a delay between hits. Fixed Crash on saving with more than 10 trinkets equipped Duplicating vanilla trinket companions Changed Hitscan ProcTAS now fires at the companion's position, instead of the target position, this is because HitTAS was added 1.5.1 Fixed Crash on day ending 1.5.0 Added Interact now uses a keybind, configurable in GMCM Inventories of equipped trinkets can now be opened with a keybind, configurable in GMCM Updated documentation with all 1.5.0 changes Add 2 new GSQ please see docs mushymato.TrinketTinker_IN_ALT_VARIANT <Input|Target> <itemId> <item count compare> mushymato.TrinketTinker_TRINKET_HAS_ITEM <Input|Target> <itemId> <item count compare> Add 1 new Item Query for specific usage mushymato.TrinketTinker_HIRE_TRINKET <trinketId> Allow Proc Always to respect Condition 1.5.0-beta.2 Added Make sure your trinkets get unequipped if you end the day with trinketSlots=0 for some reason, unfortunately won't catch case where the trinketSlots stat changed after DayEnding Change ProcSound to a model with these 2 fields CueName: sound cue to play Pitch: list of int pitch (/2400), random one will be used Old form of string still works HarvestTo on HarvestStone/Forage/Shakeable/Crop now takes TinkerInventory, which puts the item into the companion's inventory (if it has one) HarvestTo now works with ItemDrop abilities Nop anim clips may now have a duration Alt variants for companions to switch variant on the fly (just visual, no effect on the variant number) Chatter ability, pick a dialogue from a set of Chatter dialogue data ProcChatterKey, force a particular chatter key the next time a chatter ability is activated Ability can now check for InCombat, combat is defined as \"location has monster\" and player have dealt damage/taken damage in the last 10 seconds Change GSQ to use Input/Target, new syntax: mushymato.TrinketTinker_IS_TINKER <Input|Target|ItemId> [level] [variant] mushymato.TrinketTinker_HAS_LEVELS <Input|Target|ItemId> mushymato.TrinketTinker_HAS_VARIANTS <Input|Target|ItemId> mushymato.TrinketTinker_ENABLED_TRINKET_COUNT <Input|Target|ItemId> <playerKey> [count] [trinketId] Fixed Made a bunch of lists in the data model nullable Deprecated Motions Draw for 36 slot trinket inventory 1.5.0-beta.1 Added New ability BroadcastAction, it's like action but it runs the action on multiplayer, useful with SetNpcInvisible and Host New Proc Interact which fires when player right clicks when overlapping with companion enough, as well as debug draw for bounding boxes. EquipTrinket now bans trinkets with CustomFields mushymato.TrinketTinker/DirectEquipOnly from entering the inventory in the first place. Lerp now has Velocity, -2: old behaviour, -1: match speed with farmer, 0 does not move except teleport, 1+ caps the velocity of the trinket. Lerp now has NoOverlap, makes this companion avoid entering the bounding box of another companion. Speech bubble allowed to interrupt previous speech bubble during fade out time New actions for equipping a hidden trinket, does not require trinketSlot to use (up to modder to gate that trigger action) mushymato.TrinketTinker_EquipHiddenTrinket <trinketId> [level] [variant] [daysDuration]: equip trinket for daysDuration days, or -1 by default (unequip only with the following action) mushymato.TrinketTinker_UnequipHiddenTrinket <trinketId> [level] [variant]: unequip trinket level and variant do not support R, unlike mushymato.TrinketTinker_CREATE_TRINKET 1.5.0-beta.0 Added Allow HarvestShakeable to target larger bushes (but not walnut bush), handle BushBloomMod integration New game state queries mushymato.TrinketTinker_IS_TINKER [level] [variant]: check the input item is a trinket with tinker data, then check if the item is of some level and variant. Compare operators can be used, one of >1, <1, >=1, <=1, !=1. mushymato.TrinketTinker_HAS_LEVELS: check the input item is a trinket with tinker data, then check if the input item has any unlocked levels. mushymato.TrinketTinker_HAS_VARIANTS: check the input item is a trinket with tinker data, then check if the input item has any unlocked variants. mushymato.TrinketTinker_ENABLED_TRINKET_COUNT <playerKey> [count] [trinketId]: Count number of trinket of particular ID (either the optional trinketId or inputItem) equipped and activated, and compare it to a number. MachineOutputItem CustomData mushymato.TrinketTinker/Increment, allows upgrading a trinket's level or variant by X amount Trinket companion/effects can be silenced with EnableCondition on TinkerData, essentially making them do nothing on equip. Trinket can now have an inventory via Inventory on TinkerData, \"use\" the trinket item to open this inventory. EquipTrinket ability, equips trinkets inside the inventory. Trinkets can be banned from this ability by setting mushymato.TrinketTinker/DirectEquipOnly to \"T\" or any non null value. Trinkets equipped this way will have modData mushymato.TrinketTinker/IndirectEquip set to \"T\". ActionAbility: support for Actions (list of actions), ActionEnd (action to run at removal for AlwaysProc), and ActionsEnd (list of end actions) TriggerActionContext from ActionAbility now use mushymato.TrinketTinker/Action as name and pass these fields via CustomFields: mushymato.TrinketTinker/Owner: trinket owner (Farmer) mushymato.TrinketTinker/Trinket: trinket item (Trinket) mushymato.TrinketTinker/Data: AbilityData (TrinketTinker.Models.AbilityData) mushymato.TrinketTinker/Position: companion position including offset (Vector2) GameStateQueryContext from ability proc check now provides the trinket item as inputItem and targetItem, along with mushymato.TrinketTinker/Data: AbilityData (TrinketTinker.Models.AbilityData) mushymato.TrinketTinker/Position: companion position including offset (Vector2) LerpMotion Velocity argument Limits velocity to some constant float When velocity is -1, match velocity to player movement speed Default: velocity is -2 or lower, regular Lerp Fixed Some abilities did not apply due to an incorrect check for max level 1.4.5 Fixed Error with filtering for certain types of crops (ginger?). 1.4.4 Added Draw debug mode that shows the sprite index of the companion on screen. Toggle with command tt_draw_debug. Fixed Companions not appearing in volcano and farm buildings. 1.4.3 Added New HarvestShakeable ability to shake trees bushes and fruit trees. New Shakeable anchor target. New Nop ability that does nothing, but can be used for purpose of proc effects. Anchors can now specify a list of RequiredAbilities. If set, the anchor only activates if the trinket has ability of matching AbilityClass at the current level. Some mode dependent default values are provided. Abilities can define ProcSyncDelay for how much time should pass between its proc and any follow up abilities. Crop and Forage Anchors can now specify context tag items to ignore. HarvestCrop and HarvestForage can now specify context tag items to ignore. fr.json by by Caranud 1.4.2 Fixed Hopefully fix a crash after some events, very strange. 1.4.1 Added Add support for randomized speech bubbles. Add \"Swim\" anim clip key for when the player is swimming. Fixed Companions duplicating when farmhand is exiting an event. 1.4.0 Added Add support for randomized anim clips. Add speech bubble feature. Allow one shot clips to pause movement. Changed perching clip to behave by static motion rules (check against player facing direction), rather than lerp motion rules (check against companion facing). Fixed AbilityProc clips not playing in multiplayer. 1.3.0 Added Additional HarvestTo field for Harvest type abilities to determine where the harvested item go (inventory, debris, none). New field Filter on Anchors and on Hitscan/Projectile ability. If set, the enemy types listed will not be targeted. Fixed Lerp MoveSync companions moving when a weapon is swung. They are now prevented from moving while a tool is being used. Also applies to check for perching. 1.2.1 Fixed Prevent trinket tinker anvil output method from affecting non trinket tinker items. 1.2.0 Added New \"Homing\" argument on projectile to make projectile recheck target midflight. Fixed Projectile used wrong target point, change to bounding box center. 1.1.0 Fixed Update for SDV 1.6.14, add new \"sourceChange\" argument in ItemQueryContext. 1.0.2 Fixed Correctly invalidate Data/Trinkets whenever the Tinker asset gets invalidated. 1.0.1 Fixed Add workaround for issue where TrinketEffectClass ends up being null. 1.0.0 Added Implement all the things."
  }
}