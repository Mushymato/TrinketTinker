{
  "CHANGELOG.html": {
    "href": "CHANGELOG.html",
    "title": "| TrinketTinker",
    "keywords": "Changelog All notable changes to this project will be documented here. The format is based on Keep a Changelog, and this project adheres to Semantic Versioning. 1.4.0 Added Add support for randomized anim clips. Allow one shot clips to pause movement. Changed perching clip to behave by static motion rules (check against player facing direction), rather than lerp motion rules (check against companion facing). Fixed AbilityProc clips not playing in multiplayer. 1.3.0 Added Additional HarvestTo field for Harvest type abilities to determine where the harvested item go (inventory, debris, none). New field Filter on Anchors and on Hitscan/Projectile ability. If set, the enemy types listed will not be targeted. Fixed Lerp MoveSync companions moving when a weapon is swung. They are now prevented from moving while a tool is being used. Also applies to check for perching. 1.2.1 Fixed Prevent trinket tinker anvil output method from affecting non trinket tinker items. 1.2.0 Added New \"Homing\" argument on projectile to make projectile recheck target midflight. Fixed Projectile used wrong target point, change to bounding box center. 1.1.0 Fixed Update for SDV 1.6.14, add new \"sourceChange\" argument in ItemQueryContext. 1.0.2 Fixed Correctly invalidate Data/Trinkets whenever the Tinker asset gets invalidated. 1.0.1 Fixed Add workaround for issue where TrinketEffectClass ends up being null. 1.0.0 Added Implement all the things."
  },
  "guide/0-Trinket.html": {
    "href": "guide/0-Trinket.html",
    "title": "Trinkets | TrinketTinker",
    "keywords": "Trinkets Note The following page covers how trinkets are added in the base game, regardless of whether TrinketTinker is being used. You must add trinket items before you can extend it with trinket tinker data. Trinkets can be added with by editing Data/Trinkets, generally with Content Patcher. Example { \"Changes\": [ // Load texture { \"Action\": \"Load\", \"Target\": \"Mods/{{ModId}}/MyTrinket\", \"FromFile\": \"sprites/{{TargetWithoutPath}}.png\" }, // Edit Data/Trinkets { \"Action\": \"EditData\", \"Target\": \"Data/Trinkets\", \"Entries\": { \"{{ModId}}_MyTrinket\": { // Trinket ID, gives qualified ID of (TR){{ModId}}_MyTrinket \"Id\": \"{{ModId}}_MyTrinket\", // Display name (with i18n) \"DisplayName\": \"{{i18n:MyTrinket.DisplayName}}\", // Description, can include {0} token for the trinket level and {1} for ability descriptions \"Description\": \"{{i18n:MyTrinket.Description}}\", // Path to asset texture load target \"Texture\": \"Mods/{{ModId}}/MyTrinket\", // Sheet index (with 16x16 sprite size) \"SheetIndex\": 0, // Type that controls behavior of trinket, changing this alters what the trinket does, but several effects are hardcoded. \"TrinketEffectClass\": \"StardewValley.Objects.Trinkets.TrinketEffect\", // Add trinket to random drop pool once player attains combat mastery // Can still add other ways to acquire (e.g. shops, machine outputs) \"DropsNaturally\": true, // Allow trinket to reroll stats on the anvil (and reroll appearance on the colorizer, for trinkets with tinker data). \"CanBeReforged\": true, // Mod specific data, not used by base game or TrinketTinker // \"CustomFields\": null, // \"ModData\": null }, } } ] } Tip Refer to content patcher docs for more details about EditData and Load TrinketEffectClass Game comes with these trinket effect classes: Type Name Notes StardewValley.Objects.Trinkets.TrinketEffect Base class, drops coins if the id is ParrotEgg StardewValley.Objects.Trinkets.RainbowHairTrinketEffect Makes your hair prismatic StardewValley.Objects.Trinkets.CompanionTrinketEffect Spawns the hungry frog companion StardewValley.Objects.Trinkets.MagicQuiverTrinketEffect Shoot an arrow every few seconds StardewValley.Objects.Trinkets.FairyBoxTrinketEffect Heal the player every few seconds while in combat StardewValley.Objects.Trinkets.IceOrbTrinketEffect Shoot an icy orb that freezes the enemy every few seconds The Golden Spur and Basilisk Paw effects are not implemented through an effect class, instead certain parts of game simply checks if the player has a specific trinket equipped."
  },
  "guide/1-Tinker.html": {
    "href": "guide/1-Tinker.html",
    "title": "Tinker | TrinketTinker",
    "keywords": "Tinker To make a trinket use TrinketTinker features, add a new entry to the custom asset mushymato.TrinketTinker/Tinker. The key used must match the unqualified ID of the trinket. When a mushymato.TrinketTinker/Tinker entry exists, the TrinketEffectClass will be set to TrinketTinker.Effects.TrinketTinkerEffect from this mod. Note Trinkets can be reloaded with patch reload <content mod id>, however the trinket must be unequipped and requipped to get updated. Structure Property Type Default Notes MinLevel int 1 Changes the level value that will replace {0} in DisplayName. Variants List<VariantData> empty Defines the sprites of the companion. Motion MotionData empty Defines how the companion moves, setting this is shortcut for having a single item in Motions. Motions List<MotionData> empty Defines how the companion moves. Abilities List<List<AbilityData>> empty Defines what effects are activated, and when. Each list in the list of lists represents 1 ability level. VariantUnlockConditions List<string> empty List of game state queries that determine how many variants are unlocked. AbilityUnlockConditions List<string> empty List of game state queries that determine how many abilities are unlocked. This is a lot of stuff, what do I need to define? Technically all fields here are optional, but in that case there'd be little point to using this framework at all. To display a companion, at least 1 Variant and 1 Motion must be defined. To have the trinket do things, at least 1 list of abilities must be defined. At the moment, there's no reason to have more than 1 Motion so just setting Motion is sufficient, but this may change in the future. Trinkets are created with the first variant and at minimum level. The item query mushymato.TrinketTinker_CREATE_TRINKET is needed to create trinket at other variants/levels. Unlock Conditions VariantUnlockConditions and AbilityUnlockConditions can prevent the player from rolling variants or abilities above a certain level using game state queries. This only affects rerolling level and variants on the anvil and colorizer. Example usage with 4 abilities (lv1 to lv4): \"AbilityUnlockConditions\": [ // level 1 is always unlocked // level 2 is unconditionally unlocked null, // level 3 unlocked if player has a gold ore in inventory \"PLAYER_HAS_ITEM Current (O)384\", // level 4 is also unconditionally unlocked once 3 is unlocked null, // there is no level 5, so this value is meaningless \"FALSE\", ],"
  },
  "guide/2-Variant.html": {
    "href": "guide/2-Variant.html",
    "title": "Variant | TrinketTinker",
    "keywords": "Variant In the base game certain companions such as the frog have different color variants. With this model, you can explicitly define a sprite sheet, texture size, and optionally a color for mask. Structure Property Type Default Notes Texture string required Asset target of the loaded texture, should be a sprite sheet. Width int 16 Width of 1 sprite on the sprite sheet. Height int 16 Height of 1 sprite on the sprite sheet. ColorMask string empty Color to apply on draw, for use with grayscale sprites. Aside from RGB and hex values, monogame accepts named colors and this mod accepts special value \"Prismatic\" for an animated color cycle. TextureScale float 4 Texture draw scale, default is 4 like most things in the game. ShadowScale float 3 Size of the shadow to draw, 0 to disable shadow. LightSource LightSourceData empty If set, display a light source. This light source is only visible to the owner. LightSourceData Property Type Default Notes Radius float 2 Size of light source. Index int 1 Vanilla light source texture index. Texture string 1 Custom light map, must be loaded into game content. Color string empty Light color name, accepts same values as ColorMask. Notes There's no need to have the same width and height in all variants, as long as you have the same number of sprites required by the motion."
  },
  "guide/3-Motion.html": {
    "href": "guide/3-Motion.html",
    "title": "Motion | TrinketTinker",
    "keywords": "Motion Motion describes how the companion moves and animates. There are 2 main kinds of motion implemented in by this mod. Lerp: the companion moves to follow whenever the anchor moves far enough. If the anchor is too far, teleport over. Static: the companion stays at a fixed position relative to the anchor. Each of these have sub types like Hover for Lerp motion that hovers, see the individual pages on the sidebar for details. The term \"anchor\" refers to a position that the companion derives it's own position from. By default this is the player, but it can also be other entities like a monster. Structure Property Type Default Notes MotionClass string Lerp Type name of the motion class to use, can use short name like \"Lerp\". Refer to pages under Motion Classes in the table of contents for details. DirectionMode DirectionMode Single Determines how the trinket behaves when changing directions and controls what sprites are required. DirectionRotation bool false When true, the sprite will rotate depending on direction, the exact behavior depends the motion class. LoopMode LoopMode Standard Control animation playback. Standard: 1 2 3 4 1 2 3 4 PingPong: 1 2 3 4 3 2 1 Anchors List<AnchorTargetData> empty Ordered list of anchors to follow, if not set, fall back to following the player AlwaysMoving bool false By default the companion only animates while the player is moving, setting this to true makes the companion continue their animation. FrameStart int 0 First frame/sprite index of the directional animations, set this if you want to put multiple companions on 1 file. FrameLength int 4 Length of each cycle for directional animations. Interval float 100 Milisecond Interval between animation frames. Offset Vector2 0, 0 Constant offset to apply to the companion, on top of the motion. LayerDepth LayerDepth Position Changes draw layer relative to player. Position: Calculate layer based on Y position Behind: Always behind the player. InFront: Always infront of the player RepeatCount int 0 Number of additional repeat draws to do, to make 1 companion appear to be multiple. Putting a big number here may cause performance issues. RepeatInterval int 1000 Miliseconds between repeat draws. RepeatFrameSets int 0 If set, offset the sprite on repeat draw. AnimClips Dictionary<string, AnimClipData > empty Named anim clips that can play over the movement animation. SpeechBubbles Dictionary<string, SpeechBubbles > empty Named speech bubbles that appear over the companion. Args Dictionary varies Arguments specific to a motion class, see respective page for details. Animation The default animation behavior for a companion is to animate while the player is moving according to direction mode, and display static first frame when player is still. To use a special animation while player is still, add an AnimClip named \"Idle.0\". If the idle animation should change according to direction, add \"Idle.X\" where \"X\" is a number between 1 to 4, depending on how many directions are available for the chosen DirectionMode. See animation clips for details. To have the directional animation continue regardless of player motion, set AlwaysMoving to true. Repeat Draws One trinket can only have one companion, but it's possible to make this companion appear as multiple entities by repeating draws with a delay, creating \"shadow clones\". Abilities only happen relative to the first, original copy of the companion. To give these clones alternate appearances, extend the spritesheet downward with a modified duplicate of the companion's animations containing the same number of frames as the original. Then, set RepeatFrameSets to the number of these duplicate frames. Example RepeatCount: 2 RepeatFrameSets: 3 Spritesheet:"
  },
  "guide/3.0-Direction.html": {
    "href": "guide/3.0-Direction.html",
    "title": "Direction Mode | TrinketTinker",
    "keywords": "Direction Mode Direction mode determines number of sprites and the required arragements on the sprite sheet. This only describes number of sprites required, the sprite width and height is controlled by variants. In content patcher, use a string value like \"DirectionMode\": \"DRUL\" to set this value. Internally it is an enum. Arrangement charts in this page assumes FrameLength is 4, but you can have as many frames as desired. There's also no need to adhere to exact row layout as long as you have the correct number of sprites in the left to right & up to down order, but it is easier to organize this way as the companion's current direction is represented by a number corresponding to which set of animation it will use (with negative number representing flipped sprite), if the rows all have FrameLength number of items, then the direction index is simply the row number. Direction index is involved in anim clips, where it is used to set different clip per direction as desired. In the Direction Index tables, * indicates that this direction will not change the companion's direction index, i.e. it will continue with previous value until the next direction that will change index. Single Animate the sprite, ignore all changes to direction. This is the default value. Number of Sprites Required: 1 x FrameLength (4 by default) Direction Index Direction Index Down 1 Right 1 Up 1 Left 1 R - Right Similar Single but the sprite is flipped when going left. Number of Sprites Required: 1 x FrameLength (4 by default) Direction Index Direction Index Down * Right 1 Up -1 Left * DRUL - Down Right Up Left This mode is similar to NPC and animal sprites in the base game. Four sets of animations are required, one per direction. Number of Sprites Required: 4 x FrameLength (16 by default) Direction Index Direction Index Down 1 Right 2 Up 3 Left 4 RL - Right Left Similar to R, but allows you to supply left facing sprites for asymmetrical companions. Number of Sprites Required: 2 x FrameLength (8 by default) Direction Index Direction Index Down * Right 1 Up 2 Left * DRU - Down Right Up Similar to DRUL, but allows you to skip left facing sprites for symmetrical companions. Number of Sprites Required: 3 x FrameLength (12 by default) Direction Index Direction Index Down 1 Right 2 Up 3 Left -2"
  },
  "guide/3.1-Anchors.html": {
    "href": "guide/3.1-Anchors.html",
    "title": "Anchor Mode | TrinketTinker",
    "keywords": "Anchor Mode A companion's motion is relative to another entity's position, generally the player. Anchors consist of a list of AnchorTargetData The order matters as companion will try for anchors in order, and stop once a target is found for a given anchor mode. When no targets are found, fallback to Owner. Structure Property Type Default Notes Mode AnchorTarget Owner Anchor target, described below. Range int 640 Search range in pixels, only switch anchor when the target is less than this far from owner. Filters List<string> empty List of anchor mode specific filters, see the headings on each Mode for details. If not specified, then the filter is irrelevant for the type. Monster Anchor to nearest monster. Filters is a list of monsters to avoid targeting, based on their key in Data/Monsters. Forage Anchor to nearest forageable item. Object Anchor to nearest object. Crop Anchor to nearest non-garden pot harvestable crop. TerrainFeature Anchor to nearest terrain feature. Owner Anchor to the player who equipped the trinket. Range has no effect."
  },
  "guide/3.2-Animation Clips.html": {
    "href": "guide/3.2-Animation Clips.html",
    "title": "Animation Clips | TrinketTinker",
    "keywords": "Animation Clips Beyond the basic directional movement animation, companions can also have special animation states triggered by either a motion or an ability. These extra animations must live on the same sprite sheet and have the start frame + frame length specified in AnimData, with the right key. The start frame counts up from 0 and can be any frame on the sheet, including the previously discussed movement frames. Consider these 2 situations: The clip reuses frames in the directional animation: No new frames added. Count to the desired starting frame by going left to right, up to down. The clip's frames are unique: Append new frames to the end of the animation sheet. Count the length of the directional animation (e.g. 4*4 = 16), this will be the start frame. Additional clips that follow would start even later of course. Animation clips can be played back once (oneshot), or continuously played over the directional movement animation (override). This is decided by particular motions/abilities that request the animation. Structure Property Type Default Notes FrameStart int 0 First frame/sprite index of the animation clip. FrameLength int 4 Length of the animation clip. LoopMode LoopMode Standard Control animation playback. Standard: 1 2 3 4 1 2 3 4 PingPong: 1 2 3 4 3 2 1 Interval float empty Milisecond Interval between animation frames. If this is not set, use the Motion's interval. PauseMovement bool false If true, pause movement update of this animation clip if it plays as a one shot anim clip. RandomClips List<AnimClipData> empty Allows extra random anim clips to be provided for this key, only relevant for the top level anim clip. RandomWeight int 1 Weight of random clip, if provided. Higher number is more frequent. NopClip bool false Indicates a no-op clip that does nothing, for use with RandomClips. Directional AnimClip Keys All anim keys can take on a directional index suffix such as \"{KEY}.1\" which depends on the direction mode. The suffix takes the absolute value of the index, no need to manually flip sprites for negative direction index. Example: when the direction index is 1 and the player is still, \"Idle.1\" will be picked if available, fallback to \"Idle\". Motion Defined Keys These animation are applied when companion enter a state defined by particular motion, except for \"Idle\", which applies for all motions. These are considered \"override\" anim clips, which play until the player or trinket leaves the specified state. Key Motion Note \"Perching\" Hover Applies when companion perches on the player after a timeout. \"Jump\" Bounce, Hop Applies when the companion jumped. \"Idle\" All Motions Played when the player is not moving, Does nothing if companion is marked AlwaysMoving which forces regular directional animation to continue. Anchor Defined Keys These keys activate while the companion is locked into a particular anchor, and cease once they are no longer targeting that anchor. Key Note \"Anchor.<Mode>\" The mode referred to here is an anchor mode, see Anchors. Ability Defined Keys These keys are defined by mod, in specified models. Field Model Note ProcOneshotAnim AbilityData Play the clip once on ability proc. This is a oneshot animation, after 1 cycle is finished the companion returns to normal directional animation."
  },
  "guide/3.3-Speech Bubbles.html": {
    "href": "guide/3.3-Speech Bubbles.html",
    "title": "Speech Bubbles | TrinketTinker",
    "keywords": "Speech Bubbles Speech bubbles are a way to have the companion \"speak\" by drawing overhead text. Currently, the only way to activate a speech bubble is through ability activation with ProcSpeechBubble set to the desired key. This particular feature uses the same system vanilla does for overhead NPC text, so the amount of customization is limited. If you need something fancier, you will have to use temporary animated sprites to show/animate a custom sprite featuring your text. Structure Property Type Default Notes Text string \"Hey, Listen!\" The text to put in a bubble. Timer double 3000 Amount of time in miliseconds to display this bubble. Offset Vector2 0,0 By default, the text is drawn above the companion's sprite, this adds additional offset on top. Color string empty Speech text color. Aside from RGB and hex values, monogame accepts named colors and this mod accepts special value \"Prismatic\" for an animated color cycle. ScrollType int 1 Type of scroll(background) to draw, 0 1 2 3 4 all give valid backgrounds. LayerDepth float 1 Layer depth offset from the companion's draw layer depth. JunimoText bool false Layer depth offset from the companion's draw layer depth. FadeIn float 0.1 Percent of timer to spend in fade in (transparent to solid). FadeOut float 0.1 Percent of timer to spend in fade out (solid to transparent). Shake int 0 If greater than 0, randomly offset the draw position each frame."
  },
  "guide/3.z-Motion Classes.html": {
    "href": "guide/3.z-Motion Classes.html",
    "title": "| TrinketTinker",
    "keywords": ""
  },
  "guide/3.z.000-Lerp.html": {
    "href": "guide/3.z.000-Lerp.html",
    "title": "Lerp | TrinketTinker",
    "keywords": "Lerp The companion follows the anchor at a distance. They will move as fast as they need to in order to stay within the desired distance. Lerp motion operate by this logic, using a lerp variable between 0 and 1. If the companion is too far (>Max) from the anchor position, teleport to the anchor. If the companion is far enough (>Min) from the anchor position, Record companion current position as start. Pick an end position based on the anchor. Enter lerping state. When start and end positions are set, increase lerp by value relative to elapsed game time, then calculate companion position with start + (end - start) * lerp. Once lerp reach 1 (and thus the companion reached the end position), exit lerping state. This completes 1 lerp step, and the companion will try to initiate new lerp state in the next game update tick. Args Property Type Default Notes Min float 96 Min distance from anchor, the companion does not move until they are this far from the anchor. Max float 1280 Max distance from anchor, if the companion is farther away than this, teleport. Rate float 400 Miliseconds needed to complete 1 lerp, higher number makes companion take larger but slower lerp steps. Pause float 0 Pause between picking next position to lerp to. MoveSync bool false When true, only allow companion to move when the player moves. Jitter float 0f Add randomness to movement, if greater than 0 and AlwaysMoving is true, the companion will randomly move around the anchor while within minimum range."
  },
  "guide/3.z.001-Hover.html": {
    "href": "guide/3.z.001-Hover.html",
    "title": "Hover | TrinketTinker",
    "keywords": "Hover Like Lerp motion, but the companion is drawn some distance away from their shadow, making them seem like they are hovering. They also do a little bit of periodic bobbing motion. The offset can be controlled with motion offset. Args Property Type Default Notes Magnitude float 16 Amount of up and down bobbing in pixels. Period float 800 Period of the bobbing motion in miliseconds. PerchingTimeout float empty If set, companion will try to perch on the player when the player is still for this many miliseconds. PerchingOffset Vector2 0,0 Postion offset when perching, must use the string \"x,y\" format. *and all arguments of Lerp Perching When PerchingTimeout is set to a non-null value, the companion will \"land\" on the player's head after the timeout elapses. To have the companion show an alternate animation, set a \"Perching\" animation clip with the desired frame start, frame length, etc. PerchingOffset changes the perching position, relative to hover position."
  },
  "guide/3.z.002-Bounce.html": {
    "href": "guide/3.z.002-Bounce.html",
    "title": "Bounce | TrinketTinker",
    "keywords": "Bounce Like Lerp motion, but the companion bounces up and down periodically. To have the companion show an alternate animation while bouncing, set a \"Jump\" animation clip with the desired frame start, frame length, etc. The difference between Bounce and Hop is that bounce calculates bounces independent of lerp start and end, it also provides squashing for deforming the sprite when hitting the ground. Args Property Type Default Notes MaxHeight float 96 Height of bounce. Squash float 0f Amount of squish to apply when companion hits the ground. Period float 400 Length of each bounce in miliseconds. *and all arguments of Lerp"
  },
  "guide/3.z.003-Hop.html": {
    "href": "guide/3.z.003-Hop.html",
    "title": "Bounce | TrinketTinker",
    "keywords": "Bounce Like Lerp motion, but the companion leaps from point to point, following the start and end positions set by lerp. To have the companion show an alternate animation while bouncing, set a \"Jump\" animation clip with the desired frame start, frame length, etc. The difference between Hop and Bounce is that hop is synchronized with lerp start and end positions. Due ot reliance on lerp, hop motion appears janky in multiplayer. Args Property Type Default Notes MaxHeight float 128 Height of bounce. *and all arguments of Lerp"
  },
  "guide/3.z.004-Serpent.html": {
    "href": "guide/3.z.004-Serpent.html",
    "title": "Serpent | TrinketTinker",
    "keywords": "Serpent Draws additional body segments that follow the base sprite, which is treated as the head. Requires 2 additional sets of sprites for the body segments and tail. The number per set required is the determined by direction and frame length, just like the base sprite number. A minimal serpent would require just 3 sprites (head, segment, tail), using direction mode Single with frame length of 1. Serpent frame To have the head rotate as well, set DirectionRotate to true. Args Property Type Default Notes SegmentCount int 5 Number of segments to draw, excluding the head. SegmentAlts int 1 Number of alternate segment appearanches, default 1 means only 1 kind of segment. Multiple kinds of segments will be drawn in alternating order. HasTail bool true Whether this serpent is capped off by a unique segment that comes immediately after the last (alt) segment. Sparcity float 3.5 Factor determining how spaced out each segment is. The default value of 3.5 gives a little bit of overlap between segments. *and all arguments of Lerp"
  },
  "guide/3.z.100-Static.html": {
    "href": "guide/3.z.100-Static.html",
    "title": "Static | TrinketTinker",
    "keywords": "Static Companion animates according to direction rules, but otherwise does not move. When DirectionRotation is true, the companion points the right side of their sprite towards the owner's facing direction. Args No extra arguments."
  },
  "guide/3.z.101-Orbit.html": {
    "href": "guide/3.z.101-Orbit.html",
    "title": "Orbit | TrinketTinker",
    "keywords": "Orbit Orbit around the anchor. Args Property Type Default Notes RadiusX float 96 Horizontal radius. RadiusY float 40 Vertical radius. Height float 64 Y offset from position to shadow. Period float 1000 Period of 1 orbit around player, in miliseconds."
  },
  "guide/3.z.102-Relative.html": {
    "href": "guide/3.z.102-Relative.html",
    "title": "Orbit | TrinketTinker",
    "keywords": "Orbit Alters the offset depending on the direction, to give illusion that the trinket is attached to the player. Not very useful until you set an offset Args No extra arguments."
  },
  "guide/4-Ability.html": {
    "href": "guide/4-Ability.html",
    "title": "| TrinketTinker",
    "keywords": "Ability Ability describes the effects that occur when you equip the trinket, like getting healed, or attacking an enemy. An ability is primarily defined by AbilityClass (what it does) and Proc (when does it activate). Structure Property Type Default Notes AbilityClass string DebugDummy Type name of the motion class to use, can use short name like Buff. Refer to page titles under \"Ability Classes\" in the table of contents for details. Description string empty String of the ability, will be used to substitute \"{1}\" in a trinket's description. Proc ProcOn Footstep Make ability activate when something happens. ProcTimer double -1 After an ability proc, prevent further activations for this amount of time. ProcSyncIndex int 0 For use with Proc.Sync, makes this ability activate after another ability in the same level. ProcSound string empty Play a sound cue when ability procs (details) ProcTAS List<string> empty String Ids of temporary animated sprites to show when the ability activates. ProcOneshotAnim string empty Play the matching anim clip on proc, return to normal animation after 1 cycle. ProcSpeechBubble string empty Show the matching speech bubble on proc. Condition string empty A game state query that must pass before proc. DamageThreshold int -1 Must receive or deal this much damage before proc. For ReceiveDamage & DamageMonster IsBomb bool? empty Must deal damage with(true)/not with(false) a bomb. For DamageMonster & SlayMonster, IsCriticalHit bool? empty Must (true)/must not(false) deal a critical hit. Args Dictionary varies Arguments specific to an ability class, see respective page for details. Ability Descriptions Abilities are internally 0-indexed, but the displayed minimum ability can be changed in TinkerData -hen there are multiple abilities per level and a description for each, they will be joined with new line before passed to description template. It's not neccesary to provide descriptions to all abilities in a level, often it is easier to describe the entire ability in 1 description on the first ability, while leaving the others blank. Example of a description template for a trinket with 2 ability levels: // Trinket \"Description\": \"My trinket {0}:\\n====\\n{1}\" // Tinker \"MinLevel\": 2 // Tinker Abilities [ [ // rest of ability omitted {\"Description\": \"first ability A\", ...}, {\"Description\": \"second ability B\", ...}, ], [ // rest of ability omitted {\"Description\": \"first ability C\", ...}, {\"Description\": \"second ability D\", ...} ] ] Description when trinket has internal level 0: My trinket 2: ==== first ability A second ability B Description when trinket has internal level 1: My trinket 3: ==== first ability C second ability D"
  },
  "guide/4.0-Proc.html": {
    "href": "guide/4.0-Proc.html",
    "title": "Proc | TrinketTinker",
    "keywords": "Proc Proc determines when an ability activate, kind of like the trigger in a trigger action. The word \"proc\" is gamer slang for \"activate\", used because it's only 4 letters long. The Proc value is not the only factor on whether ability will activate. It must pass any timeout and conditions listed in abilites. In content patcher, use a string value like \"Proc\": \"Always\" to set this value. Internally it is an enum. ProcOn Footstep When the player walks around. ReceiveDamage When the player is damanged. Checks if damage taken is greater than DamageThreshold. DamageMonster When the player damages a monster. Checks if damage dealt is greater than DamageThreshold, and if IsBomb & IsCriticalHit matches the damage. SlayMonster When the player slays a monster. Checks if damage dealt is greater than DamageThreshold, and if IsBomb & IsCriticalHit matches the damage. Timer When timer elapses, must set ProcTimer to use. Trigger When the action \"mushymato.TrinketTinker/ProcTrinket\" is called. If the unqualified trinket Id is given (e.g. \"mushymato.TrinketTinker/ProcTrinket MyTrinket\"), only the specified trinket's ablities will proc. Warped When the player warps/moves to another map. Sync Activate the ability when another ability on the same level activates. By default this follows the first ability (index 0) and can be changed by setting ProcSyncIndex to a different number. Always Activate the ability once on equip, deactivate it on unequip. Mainly useful as a way to give a persistent Buff."
  },
  "guide/4.z-Ability Classes.html": {
    "href": "guide/4.z-Ability Classes.html",
    "title": "| TrinketTinker",
    "keywords": ""
  },
  "guide/4.z.01-Buff.html": {
    "href": "guide/4.z.01-Buff.html",
    "title": "Buff | TrinketTinker",
    "keywords": "Buff Applies a buff to the player. Must be a buff registered in Data/Buffs, no support for inline buffs. Args Property Type Default Notes BuffId float 0 String id of buff to apply."
  },
  "guide/4.z.02-Health.html": {
    "href": "guide/4.z.02-Health.html",
    "title": "Health | TrinketTinker",
    "keywords": "Health Recover some amount of HP. If Min and Max are negative, this ability will damage the player instead. Args Property Type Default Notes ValueMode ValueMode \"Percent\" Treat the range as either percent or a true value Min double 0 Minimum value. Max double 0 Maximum value."
  },
  "guide/4.z.03-Stamina.html": {
    "href": "guide/4.z.03-Stamina.html",
    "title": "Stamina | TrinketTinker",
    "keywords": "Stamina Recover some amount of energy. If Min and Max are negative, this ability will drain the player's energy instead. Args Property Type Default Notes ValueMode ValueMode \"Percent\" Treat the range as either percent or a true value Min double 0 Minimum value. Max double 0 Maximum value."
  },
  "guide/4.z.04-ItemDrop.html": {
    "href": "guide/4.z.04-ItemDrop.html",
    "title": "ItemDrop | TrinketTinker",
    "keywords": "ItemDrop Drops an item, picked with item query. Args Property Type Default Notes SearchMode ItemQuerySearchMode \"RandomOfTypeItem\" Determine how the final item is picked from results. *Also accepts all members of GenericSpawnItemData, which is the usual item spawn fields minus Condition. Use the Condition field on ability instead."
  },
  "guide/4.z.05-Hitscan.html": {
    "href": "guide/4.z.05-Hitscan.html",
    "title": "Hitscan | TrinketTinker",
    "keywords": "Hitscan Do damage to a monster within range, can roll criticals, explode, and apply stun/knockback. Args Property Type Default Notes Min int 0 Minimum damage dealt. Max int 0 Maximum damage dealt. Range int 64 Pixel range for finding monster to target. Knockback float 0 Knockback modifier in %. Precision int 0 Precision, doesn't do much unless monster has dodge rate. CritChance float 0 Chance to roll a critical hit. CritDamage float 0 Modifier to critical hit damage. StunTime int 0 Milisecond time to stun the enemy. StunTAS string empty Show this temporary animated sprite while the enemy is stunned, calculate loop from stun time instead of loop value set in the TAS asset. When used with Projectile, the TAS's rotation is also overwritten with the projectile's rotation. Hits int 0 Number of hits to apply at once, monster will only get iframes after the final hit. ExplodeRadius int 0 Generate a explosion with this radius on hit, farmer will take damage from it. Might damage another monster, but the monster that got hit would be in iframe at this point. Filters List<string> empty List of monster types to avoid targeting."
  },
  "guide/4.z.06-Projectile.html": {
    "href": "guide/4.z.06-Projectile.html",
    "title": "Projectile | TrinketTinker",
    "keywords": "Projectile Do damage to a monster within range using a projectile. Can roll criticals and apply stun/knockback. Uses a custom projectile class that accepts custom projectile texture. Args Property Type Default Notes Texture string \"TileSheets/Projectiles\" Path to custom projectile texture. SpriteIndex int 0 Sprite index of projectile. SpriteWidth int 16 Projectile sprite width. SpriteHeight int 16 Projectile sprite height. TailCount int 0 Number of echo/trail sprites to draw. MinVelocity float 12 Starting projectile velocity. MaxVelocity float -1 Maximum projectile velocity, -1 if unbounded. Acceleration float 1 Velocity increase per tick. Pierce int 1 Number of times the projectile can collide (with enemy object or terrain) before it is destroyed. IgnoreObjectCollisions bool false Allow projectile to pass through object/terrain. IgnoreLocationCollisions bool false Allow projectile to pass through walls. Homing bool false Recheck target and adjust trajectory midflight. *and all arguments of Hitscan"
  },
  "guide/4.z.07-RaiseTrigger.html": {
    "href": "guide/4.z.07-RaiseTrigger.html",
    "title": "RaiseTrigger | TrinketTinker",
    "keywords": "RaiseTrigger Raise the trigger \"mushymato.TrinketTinker/TrinketProc\". The trigger action handler will recieve player and location (nullable), as well as the trinket item as targetItem. Can have niche uses, but it is generally better to directly call the registered delegate with the Action ability. Args No additional arguments."
  },
  "guide/4.z.08-Action.html": {
    "href": "guide/4.z.08-Action.html",
    "title": "Action | TrinketTinker",
    "keywords": "Action Run an registered action, either vanilla or mod provided. Args Property Type Default Notes Action string required An action to run."
  },
  "guide/4.z.09-HoeDirt.html": {
    "href": "guide/4.z.09-HoeDirt.html",
    "title": "HoeDirt | TrinketTinker",
    "keywords": "HoeDirt Create tilled soil in random tiles around the companion. Args Property Type Default Notes Range int 1 Tile radius around companion, 0 for the tile the companion is on, 1 for 3x3, 2 for 5x5, and so on. Count int 1 Number of tiles to randomly choose each time. Watering bool false Water the newly hoed dirt, will not water existing dirt."
  },
  "guide/4.z.10-HarvestCrop.html": {
    "href": "guide/4.z.10-HarvestCrop.html",
    "title": "HarvestCrop | TrinketTinker",
    "keywords": "HarvestCrop Harvest nearby crops, professions and exp applies. Will not harvest crops in a pot. Can use with AnchorMode.Crop to make companion seek out crops. Args Property Type Default Notes Range int 1 Tile radius around companion, 0 for the tile the companion is on, 1 for 3x3, 2 for 5x5, and so on. Count int 1 Number of stone to break each time."
  },
  "guide/4.z.10-HarvestForage.html": {
    "href": "guide/4.z.10-HarvestForage.html",
    "title": "HarvestForage | TrinketTinker",
    "keywords": "HarvestForage Harvest nearby forage, professions and exp applies. Can use with AnchorMode.Forage to make companion seek out forage. Args Property Type Default Notes Range int 1 Tile radius around companion, 0 for the tile the companion is on, 1 for 3x3, 2 for 5x5, and so on. Count int 1 Number of forage to harvest each time."
  },
  "guide/4.z.10-HarvestStone.html": {
    "href": "guide/4.z.10-HarvestStone.html",
    "title": "HarvestStone | TrinketTinker",
    "keywords": "HarvestStone Break nearby stones and ores, professions and exp don't apply. Can use with AnchorMode.Forage to make companion seek out forage. Args Property Type Default Notes Range int 1 Tile radius around companion, 0 for the tile the companion is on, 1 for 3x3, 2 for 5x5, and so on. Count int 1 Number of stone to break each time."
  },
  "guide/5-Temporary Animated Sprite.html": {
    "href": "guide/5-Temporary Animated Sprite.html",
    "title": "Temporary Animated Sprite | TrinketTinker",
    "keywords": "Temporary Animated Sprite Temporary animated sprites are ways to show animated effects on screen temporarily. They existed prior to 1.6, but was given a proper data model to use in Data/Machines. For trinket tinker, any field that calls for temporary animated sprites takes string ids corresponding to an entry in mushymato.TrinketTinker/TAS rather than the full definition. This let you reuse the same TAS in multiple places. TemporaryAnimatedSpriteDefinition Note TemporaryAnimatedSpriteDefinition is a class provided by the game, not defined by this mod. Property Type Default Notes Id string required Unique string id Condition string empty Game state query, show TAS if true. Texture string required Texture asset name. SourceRect Rectangle required Area of texture to draw. Interval float 100 Time between frames, in miliseconds. Frames int 1 Length of the animation. Loops int empty Number of times to repeat the animation. PositionOffset Vector2 Vector2.Zero Offset added to position during draw. Flicker bool empty Skips drawing every other frame. Flip bool false Horizontally flip the sprite during draw. SortOffset float empty Offset on layer depth, for determining whether this sprite appear over or under other sprites. AlphaFade float empty Amount of additional transparency every frame. Set this to make the sprite fade away over time. Scale float 1f Draw scale, applied on top of the default 4x scale. ScaleChange float empty Amount of additional scale every frame. Set this to make sprite enlarge/shrink over time. Rotation float empty Amount of rotation on the sprite. RotationChange float empty Amount of additional rotation every frame. Set this to make the sprite spin. Color string empty Color to apply on draw, for use with grayscale sprites. Aside from RGB and hex values, monogame accepts named colors."
  },
  "guide/6-Utility.html": {
    "href": "guide/6-Utility.html",
    "title": "Utility | TrinketTinker",
    "keywords": "Utility Extra non-trinket features provided by this mod. Trinket Colorizer The trinket colorizer is a big craftable machine that can be purchased from the Blacksmith for 50 Gold Bars once the Anvil recipe is obtained. Trinkets must have at least 2 variants and CanBeReforged set to true in order to use the colorizer. Consumes 15 Omni Geode to reroll the variant on a TrinketTinker trinket, no effect on vanilla trinkets. The colorizer will never roll the same variant twice in a row. Anvils have similar rule applied to them for TrinketTinker trinkets. Implementation wise, the colorizer is a standard machine with qualified ID (BC)mushymato.TrinketTinker_TrinketColorizer and a single complex output machine rule.Mods are can add more ways to obtain this machine and prepend the colorizer with special upgrade rules for their trinkets. Item Queries These are useful for populating shops and machine output rules. mushymato.TrinketTinker_CREATE_TRINKET mushymato.TrinketTinker_CREATE_TRINKET <trinket id> [level] [variant] Create a new trinket item. If the trinket has tinker data, set level and variant. Useful for producing a trinket at specified level/variant. Setting level or variant to \"R\" will randomize the level or variant. mushymato.TrinketTinker_CREATE_TRINKET_ALL_VARIANTS mushymato.TrinketTinker_CREATE_TRINKET_ALL_VARIANTS <trinket id> [level] Create all variants of a trinket (with tinker data). Useful for making a shop sell all variants of a trinket instead of making the player roll for them. Setting level to \"R\" will randomize the level once, and then set trinkets created by this query to that level. Data/Location CustomFields Aside from conditions defined on a particular trinket, it's also possible to disable trinket features for a whole location using CustomFields. \"mushymato.TrinketTinker/disableAbilities\": true|false Disable trinket abilities while owner is in the location (except for always active abilities). \"mushymato.TrinketTinker/disableCompanions\": true|false Disable companion display while owner is in the location. Their position updates continue."
  },
  "guide/x-example.html": {
    "href": "guide/x-example.html",
    "title": "| TrinketTinker",
    "keywords": "All examples are assumed to live under content patcher Tinker Trinket & Sprites // Load texture { \"Action\": \"Load\", \"Target\": \"Mods/{{ModId}}/MyTrinket\", \"FromFile\": \"sprites/{{TargetWithoutPath}}.png\" }, // Edit Data/Trinkets { \"Action\": \"EditData\", \"Target\": \"Data/Trinkets\", \"Entries\": { \"{{ModId}}_MyTrinket\": { // Trinket ID, gives qualified ID of (TR){{ModId}}_MyTrinket \"Id\": \"{{ModId}}_MyTrinket\", // Display name (with i18n) \"DisplayName\": \"{{i18n:MyTrinket.DisplayName}}\", // Description \"Description\": \"{{i18n:MyTrinket.Description}}\", // Path to asset texture load target \"Texture\": \"Mods/{{ModId}}/MyTrinket\", // Sheet index (with 16x16 sprite size) \"SheetIndex\": 0, // Add trinket to random drop pool once player attains combat mastery // Can still add other ways to acquire (e.g. shops, machine outputs) \"DropsNaturally\": true, // Allow trinket to reroll stats on the anvil \"CanBeReforged\": true, }, } }"
  },
  "index.html": {
    "href": "index.html",
    "title": "TrinketTinker - Stardew Valley Trinket Framework | TrinketTinker",
    "keywords": "TrinketTinker - Stardew Valley Trinket Framework This is a framework for creating custom trinkets using Content Patcher. What can this framework do? Animated companions with various movement patterns. A skin system (variants) for companions, and related features to set/change companion variants Dynamic event based abilities that work through the companions rather than the player. Some support for custom effects from other C# mods, through the use of actions. If you are looking to make mods using this framework, start here. This mod is licensed under MIT, contributions are welcome. Credits Documentation generated with Docfx, with docfx-material theme. Changelog All notable changes to this project will be documented here. The format is based on Keep a Changelog, and this project adheres to Semantic Versioning. 1.4.0 Added Add support for randomized anim clips. Allow one shot clips to pause movement. Changed perching clip to behave by static motion rules (check against player facing direction), rather than lerp motion rules (check against companion facing). Fixed AbilityProc clips not playing in multiplayer. 1.3.0 Added Additional HarvestTo field for Harvest type abilities to determine where the harvested item go (inventory, debris, none). New field Filter on Anchors and on Hitscan/Projectile ability. If set, the enemy types listed will not be targeted. Fixed Lerp MoveSync companions moving when a weapon is swung. They are now prevented from moving while a tool is being used. Also applies to check for perching. 1.2.1 Fixed Prevent trinket tinker anvil output method from affecting non trinket tinker items. 1.2.0 Added New \"Homing\" argument on projectile to make projectile recheck target midflight. Fixed Projectile used wrong target point, change to bounding box center. 1.1.0 Fixed Update for SDV 1.6.14, add new \"sourceChange\" argument in ItemQueryContext. 1.0.2 Fixed Correctly invalidate Data/Trinkets whenever the Tinker asset gets invalidated. 1.0.1 Fixed Add workaround for issue where TrinketEffectClass ends up being null. 1.0.0 Added Implement all the things."
  }
}