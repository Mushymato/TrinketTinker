{
  "CHANGELOG.html": {
    "href": "CHANGELOG.html",
    "title": "Changelog | TrinketTinker",
    "keywords": "Changelog All notable changes to this project will be documented in this file. The format is based on Keep a Changelog, and this project adheres to Semantic Versioning. [1.0.0] - 2024-10-?? Added Initial release."
  },
  "README.html": {
    "href": "README.html",
    "title": "Trinket Tinker | TrinketTinker",
    "keywords": "Trinket Tinker Framework for adding trinkets with various effects."
  },
  "api/TrinketTinker.Companions.Motions.BaseLerpMotion-1.html": {
    "href": "api/TrinketTinker.Companions.Motions.BaseLerpMotion-1.html",
    "title": "Class BaseLerpMotion<IArgs> | TrinketTinker",
    "keywords": "Class BaseLerpMotion<IArgs> Namespace TrinketTinker.Companions.Motions Assembly TrinketTinker.dll Base version of LerpMotion, for use with inheritance public class BaseLerpMotion<IArgs> : Motion<IArgs>, IMotion where IArgs : LerpArgs Type Parameters IArgs Inheritance object Motion<IArgs> BaseLerpMotion<IArgs> Implements IMotion Derived BounceMotion HoverMotion LerpMotion Inherited Members Motion<IArgs>.c Motion<IArgs>.d Motion<IArgs>.motionOffset Motion<IArgs>.isReverse Motion<IArgs>.lightId Motion<IArgs>.args Motion<IArgs>.prevAnchorTarget Motion<IArgs>.currAnchorTarget Motion<IArgs>.AnchorChanged Motion<IArgs>.Initialize(Farmer) Motion<IArgs>.Cleanup() Motion<IArgs>.OnOwnerWarp() Motion<IArgs>.UpdateAnchor(GameTime, GameLocation) Motion<IArgs>.UpdateGlobal(GameTime, GameLocation) Motion<IArgs>.Draw(SpriteBatch) Motion<IArgs>.DrawWithShadow(SpriteBatch, float, Vector2, Vector2) Motion<IArgs>.UpdateDirection() Motion<IArgs>.UpdateDirection(Vector2) Motion<IArgs>.DirectionFrameStart() Motion<IArgs>.CheckSpriteCollsion(GameLocation, Vector2) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors BaseLerpMotion(TrinketTinkerCompanion, MotionData) Basic constructor, tries to parse arguments as the generic IArgs type. public BaseLerpMotion(TrinketTinkerCompanion companion, MotionData data) Parameters companion TrinketTinkerCompanion data MotionData Methods UpdateLocal(GameTime, GameLocation) Update info that should change every tick, for owner only. Netfield changes should happen here. public override void UpdateLocal(GameTime time, GameLocation location) Parameters time GameTime location GameLocation"
  },
  "api/TrinketTinker.Companions.Motions.BaseStaticMotion-1.html": {
    "href": "api/TrinketTinker.Companions.Motions.BaseStaticMotion-1.html",
    "title": "Class BaseStaticMotion<IArgs> | TrinketTinker",
    "keywords": "Class BaseStaticMotion<IArgs> Namespace TrinketTinker.Companions.Motions Assembly TrinketTinker.dll public class BaseStaticMotion<IArgs> : Motion<IArgs>, IMotion where IArgs : StaticArgs Type Parameters IArgs Inheritance object Motion<IArgs> BaseStaticMotion<IArgs> Implements IMotion Derived OrbitMotion RelativeMotion StaticMotion Inherited Members Motion<IArgs>.c Motion<IArgs>.d Motion<IArgs>.motionOffset Motion<IArgs>.isReverse Motion<IArgs>.lightId Motion<IArgs>.args Motion<IArgs>.prevAnchorTarget Motion<IArgs>.currAnchorTarget Motion<IArgs>.AnchorChanged Motion<IArgs>.Initialize(Farmer) Motion<IArgs>.Cleanup() Motion<IArgs>.OnOwnerWarp() Motion<IArgs>.UpdateAnchor(GameTime, GameLocation) Motion<IArgs>.UpdateGlobal(GameTime, GameLocation) Motion<IArgs>.DrawWithShadow(SpriteBatch, float, Vector2, Vector2) Motion<IArgs>.UpdateDirection(Vector2) Motion<IArgs>.DirectionFrameStart() Motion<IArgs>.CheckSpriteCollsion(GameLocation, Vector2) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors BaseStaticMotion(TrinketTinkerCompanion, MotionData) public BaseStaticMotion(TrinketTinkerCompanion companion, MotionData data) Parameters companion TrinketTinkerCompanion data MotionData Methods Draw(SpriteBatch) Draws the companion, for all game instances in multiplayer. public override void Draw(SpriteBatch b) Parameters b SpriteBatch UpdateDirection() Update companion facing direction using player facing direction. protected override void UpdateDirection() UpdateLocal(GameTime, GameLocation) Update info that should change every tick, for owner only. Netfield changes should happen here. public override void UpdateLocal(GameTime time, GameLocation location) Parameters time GameTime location GameLocation"
  },
  "api/TrinketTinker.Companions.Motions.BounceMotion.html": {
    "href": "api/TrinketTinker.Companions.Motions.BounceMotion.html",
    "title": "Class BounceMotion | TrinketTinker",
    "keywords": "Class BounceMotion Namespace TrinketTinker.Companions.Motions Assembly TrinketTinker.dll Companion follows the player and bobs up and down public sealed class BounceMotion : BaseLerpMotion<BounceArgs>, IMotion Inheritance object Motion<BounceArgs> BaseLerpMotion<BounceArgs> BounceMotion Implements IMotion Inherited Members Motion<BounceArgs>.Initialize(Farmer) Motion<BounceArgs>.Cleanup() Motion<BounceArgs>.OnOwnerWarp() Motion<BounceArgs>.UpdateAnchor(GameTime, GameLocation) Motion<BounceArgs>.UpdateGlobal(GameTime, GameLocation) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Constructors BounceMotion(TrinketTinkerCompanion, MotionData) Companion follows the player and bobs up and down public BounceMotion(TrinketTinkerCompanion companion, MotionData data) Parameters companion TrinketTinkerCompanion data MotionData Methods Draw(SpriteBatch) Draws the companion, for all game instances in multiplayer. public override void Draw(SpriteBatch b) Parameters b SpriteBatch UpdateLocal(GameTime, GameLocation) Update info that should change every tick, for owner only. Netfield changes should happen here. public override void UpdateLocal(GameTime time, GameLocation location) Parameters time GameTime location GameLocation"
  },
  "api/TrinketTinker.Companions.Motions.HoverMotion.html": {
    "href": "api/TrinketTinker.Companions.Motions.HoverMotion.html",
    "title": "Class HoverMotion | TrinketTinker",
    "keywords": "Class HoverMotion Namespace TrinketTinker.Companions.Motions Assembly TrinketTinker.dll Companion follows the player and bobs up and down public sealed class HoverMotion : BaseLerpMotion<HoverArgs>, IMotion Inheritance object Motion<HoverArgs> BaseLerpMotion<HoverArgs> HoverMotion Implements IMotion Inherited Members Motion<HoverArgs>.Initialize(Farmer) Motion<HoverArgs>.Cleanup() Motion<HoverArgs>.OnOwnerWarp() Motion<HoverArgs>.UpdateAnchor(GameTime, GameLocation) Motion<HoverArgs>.UpdateGlobal(GameTime, GameLocation) Motion<HoverArgs>.Draw(SpriteBatch) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Constructors HoverMotion(TrinketTinkerCompanion, MotionData) Basic constructor, tries to parse arguments as the generic IArgs type. public HoverMotion(TrinketTinkerCompanion companion, MotionData data) Parameters companion TrinketTinkerCompanion data MotionData Methods UpdateLocal(GameTime, GameLocation) Update info that should change every tick, for owner only. Netfield changes should happen here. public override void UpdateLocal(GameTime time, GameLocation location) Parameters time GameTime location GameLocation"
  },
  "api/TrinketTinker.Companions.Motions.IMotion.html": {
    "href": "api/TrinketTinker.Companions.Motions.IMotion.html",
    "title": "Interface IMotion | TrinketTinker",
    "keywords": "Interface IMotion Namespace TrinketTinker.Companions.Motions Assembly TrinketTinker.dll public interface IMotion Methods Cleanup() Cleanup motion, remove lightsource. void Cleanup() Draw(SpriteBatch) Draws the companion, for all game instances in multiplayer. void Draw(SpriteBatch b) Parameters b SpriteBatch Initialize(Farmer) Initialize motion, setup lightsource if needed. void Initialize(Farmer farmer) Parameters farmer Farmer OnOwnerWarp() Update light source when owner changes location void OnOwnerWarp() UpdateAnchor(GameTime, GameLocation) Changes the position of the anchor that the companion moves relative to. void UpdateAnchor(GameTime time, GameLocation location) Parameters time GameTime location GameLocation UpdateGlobal(GameTime, GameLocation) Update info that should change every tick, for all game instances in multiplayer. void UpdateGlobal(GameTime time, GameLocation location) Parameters time GameTime location GameLocation UpdateLocal(GameTime, GameLocation) Update info that should change every tick, for owner only. Netfield changes should happen here. void UpdateLocal(GameTime time, GameLocation location) Parameters time GameTime location GameLocation"
  },
  "api/TrinketTinker.Companions.Motions.LerpMotion.html": {
    "href": "api/TrinketTinker.Companions.Motions.LerpMotion.html",
    "title": "Class LerpMotion | TrinketTinker",
    "keywords": "Class LerpMotion Namespace TrinketTinker.Companions.Motions Assembly TrinketTinker.dll Companion closely follows the anchor, at a distance public class LerpMotion : BaseLerpMotion<LerpArgs>, IMotion Inheritance object Motion<LerpArgs> BaseLerpMotion<LerpArgs> LerpMotion Implements IMotion Inherited Members BaseLerpMotion<LerpArgs>.UpdateLocal(GameTime, GameLocation) Motion<LerpArgs>.c Motion<LerpArgs>.d Motion<LerpArgs>.motionOffset Motion<LerpArgs>.isReverse Motion<LerpArgs>.lightId Motion<LerpArgs>.args Motion<LerpArgs>.prevAnchorTarget Motion<LerpArgs>.currAnchorTarget Motion<LerpArgs>.AnchorChanged Motion<LerpArgs>.Initialize(Farmer) Motion<LerpArgs>.Cleanup() Motion<LerpArgs>.OnOwnerWarp() Motion<LerpArgs>.UpdateAnchor(GameTime, GameLocation) Motion<LerpArgs>.UpdateGlobal(GameTime, GameLocation) Motion<LerpArgs>.Draw(SpriteBatch) Motion<LerpArgs>.DrawWithShadow(SpriteBatch, float, Vector2, Vector2) Motion<LerpArgs>.UpdateDirection() Motion<LerpArgs>.UpdateDirection(Vector2) Motion<LerpArgs>.DirectionFrameStart() Motion<LerpArgs>.CheckSpriteCollsion(GameLocation, Vector2) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors LerpMotion(TrinketTinkerCompanion, MotionData) Companion closely follows the anchor, at a distance public LerpMotion(TrinketTinkerCompanion companion, MotionData data) Parameters companion TrinketTinkerCompanion data MotionData"
  },
  "api/TrinketTinker.Companions.Motions.Motion-1.html": {
    "href": "api/TrinketTinker.Companions.Motions.Motion-1.html",
    "title": "Class Motion<TArgs> | TrinketTinker",
    "keywords": "Class Motion<TArgs> Namespace TrinketTinker.Companions.Motions Assembly TrinketTinker.dll Abstract class, controls drawing and movement of companion public abstract class Motion<TArgs> : IMotion where TArgs : IArgs Type Parameters TArgs Inheritance object Motion<TArgs> Implements IMotion Derived BaseLerpMotion<IArgs> BaseStaticMotion<IArgs> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors Motion(TrinketTinkerCompanion, MotionData) Basic constructor, tries to parse arguments as the generic IArgs type. public Motion(TrinketTinkerCompanion companion, MotionData data) Parameters companion TrinketTinkerCompanion data MotionData Fields args Class dependent arguments for subclasses protected readonly TArgs args Field Value TArgs c Companion that owns this motion. protected readonly TrinketTinkerCompanion c Field Value TrinketTinkerCompanion currAnchorTarget The current anchor target protected AnchorTarget currAnchorTarget Field Value AnchorTarget d Data for this motion. protected readonly MotionData d Field Value MotionData isReverse Should reverse the animation, used for PingPong protected bool isReverse Field Value bool lightId Light source ID, generated if LightRadius is set in MotionData. protected string lightId Field Value string motionOffset Constant offset, derived from data protected Vector2 motionOffset Field Value Vector2 prevAnchorTarget The previous anchor target protected AnchorTarget prevAnchorTarget Field Value AnchorTarget Properties AnchorChanged Anchor changed during this tick protected bool AnchorChanged { get; } Property Value bool Methods CheckSpriteCollsion(GameLocation, Vector2) Helper function, check if the sprite collides with anything. protected virtual bool CheckSpriteCollsion(GameLocation location, Vector2 spritePosition) Parameters location GameLocation spritePosition Vector2 Returns bool Cleanup() Cleanup motion, remove lightsource. public virtual void Cleanup() DirectionFrameStart() First frame of animation, depending on direction. protected virtual int DirectionFrameStart() Returns int Frame number Draw(SpriteBatch) Draws the companion, for all game instances in multiplayer. public virtual void Draw(SpriteBatch b) Parameters b SpriteBatch DrawWithShadow(SpriteBatch, float, Vector2, Vector2) Default draw implementation, draws the companion plus a shadow. protected virtual void DrawWithShadow(SpriteBatch b, float layerDepth, Vector2 textureScale, Vector2 shadowScale) Parameters b SpriteBatch layerDepth float textureScale Vector2 shadowScale Vector2 Initialize(Farmer) Initialize motion, setup lightsource if needed. public virtual void Initialize(Farmer farmer) Parameters farmer Farmer OnOwnerWarp() Update light source when owner changes location public virtual void OnOwnerWarp() UpdateAnchor(GameTime, GameLocation) Changes the position of the anchor that the companion moves relative to, based on Anchors. public virtual void UpdateAnchor(GameTime time, GameLocation location) Parameters time GameTime location GameLocation UpdateDirection() Update companion facing direction using current position protected virtual void UpdateDirection() UpdateDirection(Vector2) Update companion facing direction using a direction. protected virtual void UpdateDirection(Vector2 position) Parameters position Vector2 UpdateGlobal(GameTime, GameLocation) Update info that should change every tick, for all game instances in multiplayer. public virtual void UpdateGlobal(GameTime time, GameLocation location) Parameters time GameTime location GameLocation UpdateLocal(GameTime, GameLocation) Update info that should change every tick, for owner only. Netfield changes should happen here. public abstract void UpdateLocal(GameTime time, GameLocation location) Parameters time GameTime location GameLocation"
  },
  "api/TrinketTinker.Companions.Motions.OrbitMotion.html": {
    "href": "api/TrinketTinker.Companions.Motions.OrbitMotion.html",
    "title": "Class OrbitMotion | TrinketTinker",
    "keywords": "Class OrbitMotion Namespace TrinketTinker.Companions.Motions Assembly TrinketTinker.dll Companion orbits around a point public class OrbitMotion : BaseStaticMotion<OrbitArgs>, IMotion Inheritance object Motion<OrbitArgs> BaseStaticMotion<OrbitArgs> OrbitMotion Implements IMotion Inherited Members BaseStaticMotion<OrbitArgs>.UpdateDirection() Motion<OrbitArgs>.c Motion<OrbitArgs>.d Motion<OrbitArgs>.motionOffset Motion<OrbitArgs>.isReverse Motion<OrbitArgs>.lightId Motion<OrbitArgs>.args Motion<OrbitArgs>.prevAnchorTarget Motion<OrbitArgs>.currAnchorTarget Motion<OrbitArgs>.AnchorChanged Motion<OrbitArgs>.Initialize(Farmer) Motion<OrbitArgs>.Cleanup() Motion<OrbitArgs>.OnOwnerWarp() Motion<OrbitArgs>.UpdateAnchor(GameTime, GameLocation) Motion<OrbitArgs>.UpdateGlobal(GameTime, GameLocation) Motion<OrbitArgs>.DrawWithShadow(SpriteBatch, float, Vector2, Vector2) Motion<OrbitArgs>.UpdateDirection(Vector2) Motion<OrbitArgs>.DirectionFrameStart() Motion<OrbitArgs>.CheckSpriteCollsion(GameLocation, Vector2) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors OrbitMotion(TrinketTinkerCompanion, MotionData) public OrbitMotion(TrinketTinkerCompanion companion, MotionData data) Parameters companion TrinketTinkerCompanion data MotionData Fields radiusX trig function input protected readonly float radiusX Field Value float radiusY trig function input protected readonly float radiusY Field Value float Methods Draw(SpriteBatch) Draws the companion, for all game instances in multiplayer. public override void Draw(SpriteBatch b) Parameters b SpriteBatch UpdateLocal(GameTime, GameLocation) Calculates circular motion using cos for x and sin for y public override void UpdateLocal(GameTime time, GameLocation location) Parameters time GameTime location GameLocation"
  },
  "api/TrinketTinker.Companions.Motions.RelativeMotion.html": {
    "href": "api/TrinketTinker.Companions.Motions.RelativeMotion.html",
    "title": "Class RelativeMotion | TrinketTinker",
    "keywords": "Class RelativeMotion Namespace TrinketTinker.Companions.Motions Assembly TrinketTinker.dll public sealed class RelativeMotion : BaseStaticMotion<StaticArgs>, IMotion Inheritance object Motion<StaticArgs> BaseStaticMotion<StaticArgs> RelativeMotion Implements IMotion Inherited Members BaseStaticMotion<StaticArgs>.UpdateLocal(GameTime, GameLocation) Motion<StaticArgs>.Initialize(Farmer) Motion<StaticArgs>.Cleanup() Motion<StaticArgs>.OnOwnerWarp() Motion<StaticArgs>.UpdateAnchor(GameTime, GameLocation) Motion<StaticArgs>.UpdateGlobal(GameTime, GameLocation) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Constructors RelativeMotion(TrinketTinkerCompanion, MotionData) public RelativeMotion(TrinketTinkerCompanion companion, MotionData data) Parameters companion TrinketTinkerCompanion data MotionData Methods Draw(SpriteBatch) Draws the companion, for all game instances in multiplayer. public override void Draw(SpriteBatch b) Parameters b SpriteBatch UpdateDirection() Update companion facing direction using player facing direction, adjust the offset to give illusions of perspective. protected override void UpdateDirection()"
  },
  "api/TrinketTinker.Companions.Motions.StaticMotion.html": {
    "href": "api/TrinketTinker.Companions.Motions.StaticMotion.html",
    "title": "Class StaticMotion | TrinketTinker",
    "keywords": "Class StaticMotion Namespace TrinketTinker.Companions.Motions Assembly TrinketTinker.dll Companion stays at some public sealed class StaticMotion : BaseStaticMotion<StaticArgs>, IMotion Inheritance object Motion<StaticArgs> BaseStaticMotion<StaticArgs> StaticMotion Implements IMotion Inherited Members BaseStaticMotion<StaticArgs>.UpdateLocal(GameTime, GameLocation) BaseStaticMotion<StaticArgs>.Draw(SpriteBatch) Motion<StaticArgs>.Initialize(Farmer) Motion<StaticArgs>.Cleanup() Motion<StaticArgs>.OnOwnerWarp() Motion<StaticArgs>.UpdateAnchor(GameTime, GameLocation) Motion<StaticArgs>.UpdateGlobal(GameTime, GameLocation) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Constructors StaticMotion(TrinketTinkerCompanion, MotionData) Companion stays at some public StaticMotion(TrinketTinkerCompanion companion, MotionData data) Parameters companion TrinketTinkerCompanion data MotionData"
  },
  "api/TrinketTinker.Companions.Motions.html": {
    "href": "api/TrinketTinker.Companions.Motions.html",
    "title": "Namespace TrinketTinker.Companions.Motions | TrinketTinker",
    "keywords": "Namespace TrinketTinker.Companions.Motions Classes BaseLerpMotion<IArgs> Base version of LerpMotion, for use with inheritance BaseStaticMotion<IArgs> BounceMotion Companion follows the player and bobs up and down HoverMotion Companion follows the player and bobs up and down LerpMotion Companion closely follows the anchor, at a distance Motion<TArgs> Abstract class, controls drawing and movement of companion OrbitMotion Companion orbits around a point RelativeMotion StaticMotion Companion stays at some Interfaces IMotion"
  },
  "api/TrinketTinker.Companions.TrinketTinkerCompanion.html": {
    "href": "api/TrinketTinker.Companions.TrinketTinkerCompanion.html",
    "title": "Class TrinketTinkerCompanion | TrinketTinker",
    "keywords": "Class TrinketTinkerCompanion Namespace TrinketTinker.Companions Assembly TrinketTinker.dll Main companion class for trinket tinker. public class TrinketTinkerCompanion : Companion, INetObject<NetFields> Inheritance object Companion TrinketTinkerCompanion Implements INetObject<NetFields> Inherited Members Companion.direction Companion._position Companion._owner Companion.whichVariant Companion.lerp Companion.startPosition Companion.endPosition Companion.height Companion.gravity Companion.hopEvent Companion.NetFields Companion.Owner Companion.Position Companion.OwnerPosition Companion.IsLocal object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors TrinketTinkerCompanion() Argumentless constructor for netcode deserialization. public TrinketTinkerCompanion() TrinketTinkerCompanion(string, int) Construct new companion using companion ID. public TrinketTinkerCompanion(string companionId, int variant) Parameters companionId string variant int Fields Data Backing companion data from content. public TinkerData? Data Field Value TinkerData _id NetField for ID protected readonly NetString _id Field Value NetString _moving NetField for Moving protected readonly NetBool _moving Field Value NetBool _offset NetField for Offset protected readonly NetPosition _offset Field Value NetPosition rotation Amount of rotation on the sprite, applicable when direction mode is Rotate public readonly NetFloat rotation Field Value NetFloat Properties Anchor Position the companion should follow. public Vector2 Anchor { get; set; } Property Value Vector2 ID Companion ID. Companion is (re)loaded when this is changed. public string ID { get; } Property Value string Motion Motion class that controls how the companion moves. public IMotion? Motion { get; set; } Property Value IMotion Moving Whether companion is moving public bool Moving { get; set; } Property Value bool NetOffset public NetPosition NetOffset { get; } Property Value NetPosition NetPosition public NetPosition NetPosition { get; } Property Value NetPosition Offset Offset from companion's position, e.g. if companions are \"flying\" public Vector2 Offset { get; set; } Property Value Vector2 Sprite Animated sprite of companion public AnimatedSprite Sprite { get; set; } Property Value AnimatedSprite SpriteColor Color mask to use on sprite draw. public Color SpriteColor { get; } Property Value Color SpriteOrigin Middle point of the sprite, based on width and height. public Vector2 SpriteOrigin { get; set; } Property Value Vector2 Methods CleanupCompanion() Cleanup Motion class. public override void CleanupCompanion() Draw(SpriteBatch) Draw using Motion. public override void Draw(SpriteBatch b) Parameters b SpriteBatch SpriteBatch Hop(float) Vanilla hop event handler, not using. public override void Hop(float amount) Parameters amount float InitNetFields() Setup net fields. public override void InitNetFields() InitializeCompanion(Farmer) Initialize Motion class. public override void InitializeCompanion(Farmer farmer) Parameters farmer Farmer OnOwnerWarp() Reset position on warp public override void OnOwnerWarp() Update(GameTime, GameLocation) Do updates in Motion. The client of the player with the trinket is responsible for calculating position direction rotation. All clients must update animation frame. public override void Update(GameTime time, GameLocation location) Parameters time GameTime Game time location GameLocation Current map location"
  },
  "api/TrinketTinker.Companions.html": {
    "href": "api/TrinketTinker.Companions.html",
    "title": "Namespace TrinketTinker.Companions | TrinketTinker",
    "keywords": "Namespace TrinketTinker.Companions Classes TrinketTinkerCompanion Main companion class for trinket tinker."
  },
  "api/TrinketTinker.Effects.Abilities.Ability-1.html": {
    "href": "api/TrinketTinker.Effects.Abilities.Ability-1.html",
    "title": "Class Ability<TArgs> | TrinketTinker",
    "keywords": "Class Ability<TArgs> Namespace TrinketTinker.Effects.Abilities Assembly TrinketTinker.dll Abstract class, proc various effects while trinket is equipped. public abstract class Ability<TArgs> : IAbility where TArgs : IArgs Type Parameters TArgs Inheritance object Ability<TArgs> Implements IAbility Derived BuffAbility DebugDummyAbility HealthAbility HitscanAbility ItemDropAbility ProjectileAbility StaminaAbility TriggerAbility Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors Ability(TrinketTinkerEffect, AbilityData, int) Basic constructor, tries to parse arguments as the generic IArgs type. public Ability(TrinketTinkerEffect effect, AbilityData data, int lvl) Parameters effect TrinketTinkerEffect data AbilityData lvl int Fields Name Ability name, default to type name. public readonly string Name Field Value string args Class dependent arguments for subclasses protected readonly TArgs args Field Value TArgs d Data for this ability. protected readonly AbilityData d Field Value AbilityData e Companion that owns this ability. protected readonly TrinketTinkerEffect e Field Value TrinketTinkerEffect Properties Active True if trinket equiped. protected bool Active { get; set; } Property Value bool Allowed True if trinket proc timeout is not set, or elapsed. protected bool Allowed { get; set; } Property Value bool ProcTimer Tracks trinket proc timeout, counts down to 0 and resets to ProcTimer value is set in AbilityData. protected double ProcTimer { get; set; } Property Value double Valid Mark the new ability as valid, if false after constructor the ability is discarded public bool Valid { get; set; } Property Value bool Methods Activate(Farmer) Setup the ability, when trinket is equipped. public virtual bool Activate(Farmer farmer) Parameters farmer Farmer Returns bool ApplyEffect(ProcEventArgs) Applies ability effect, mark the ability as not allowed until next tick or longer. protected virtual bool ApplyEffect(ProcEventArgs proc) Parameters proc ProcEventArgs Returns bool Deactivate(Farmer) Teardown the ability, when trinket is removed. public virtual bool Deactivate(Farmer farmer) Parameters farmer Farmer Returns bool GetTASPosition() Get where the on proc StardewValley.TemporaryAnimatedSprite should be drawn from. protected virtual Vector2 GetTASPosition() Returns Vector2 HandleProc(object?, ProcEventArgs) Handle proc of ability protected virtual void HandleProc(object? sender, ProcEventArgs args) Parameters sender object args ProcEventArgs UnProc(Farmer) Cleanup ability, if is Always protected virtual void UnProc(Farmer farmer) Parameters farmer Farmer Update(Farmer, GameTime, GameLocation) Update on game tick, handles the proc timer. public virtual void Update(Farmer farmer, GameTime time, GameLocation location) Parameters farmer Farmer time GameTime location GameLocation"
  },
  "api/TrinketTinker.Effects.Abilities.BuffAbility.html": {
    "href": "api/TrinketTinker.Effects.Abilities.BuffAbility.html",
    "title": "Class BuffAbility | TrinketTinker",
    "keywords": "Class BuffAbility Namespace TrinketTinker.Effects.Abilities Assembly TrinketTinker.dll Applies a buff on proc. public sealed class BuffAbility : Ability<BuffArgs>, IAbility Inheritance object Ability<BuffArgs> BuffAbility Implements IAbility Inherited Members Ability<BuffArgs>.Name Ability<BuffArgs>.Valid Ability<BuffArgs>.Activate(Farmer) Ability<BuffArgs>.Deactivate(Farmer) Ability<BuffArgs>.Update(Farmer, GameTime, GameLocation) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Constructors BuffAbility(TrinketTinkerEffect, AbilityData, int) Applies a buff on proc. public BuffAbility(TrinketTinkerEffect effect, AbilityData data, int lvl) Parameters effect TrinketTinkerEffect data AbilityData lvl int Methods ApplyEffect(ProcEventArgs) Apply or refreshes the buff. protected override bool ApplyEffect(ProcEventArgs proc) Parameters proc ProcEventArgs Returns bool UnProc(Farmer) Removes the buff. protected override void UnProc(Farmer farmer) Parameters farmer Farmer"
  },
  "api/TrinketTinker.Effects.Abilities.DebugDummyAbility.html": {
    "href": "api/TrinketTinker.Effects.Abilities.DebugDummyAbility.html",
    "title": "Class DebugDummyAbility | TrinketTinker",
    "keywords": "Class DebugDummyAbility Namespace TrinketTinker.Effects.Abilities Assembly TrinketTinker.dll Prints many logs, doesn't do anything else. public sealed class DebugDummyAbility : Ability<NoArgs>, IAbility Inheritance object Ability<NoArgs> DebugDummyAbility Implements IAbility Inherited Members Ability<NoArgs>.Name Ability<NoArgs>.Valid Ability<NoArgs>.Activate(Farmer) Ability<NoArgs>.Deactivate(Farmer) Ability<NoArgs>.Update(Farmer, GameTime, GameLocation) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Constructors DebugDummyAbility(TrinketTinkerEffect, AbilityData, int) Prints many logs, doesn't do anything else. public DebugDummyAbility(TrinketTinkerEffect effect, AbilityData data, int lvl) Parameters effect TrinketTinkerEffect data AbilityData lvl int Methods ApplyEffect(ProcEventArgs) Print debug log. protected override bool ApplyEffect(ProcEventArgs proc) Parameters proc ProcEventArgs Returns bool"
  },
  "api/TrinketTinker.Effects.Abilities.HealthAbility.html": {
    "href": "api/TrinketTinker.Effects.Abilities.HealthAbility.html",
    "title": "Class HealthAbility | TrinketTinker",
    "keywords": "Class HealthAbility Namespace TrinketTinker.Effects.Abilities Assembly TrinketTinker.dll Recover some percent of HP. For DamageMonster and ReceiveDamage, healing is based on damage recieved or dealt instead of percent HP. public sealed class HealthAbility : Ability<PercentArgs>, IAbility Inheritance object Ability<PercentArgs> HealthAbility Implements IAbility Inherited Members Ability<PercentArgs>.Name Ability<PercentArgs>.Valid Ability<PercentArgs>.Activate(Farmer) Ability<PercentArgs>.Deactivate(Farmer) Ability<PercentArgs>.Update(Farmer, GameTime, GameLocation) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Constructors HealthAbility(TrinketTinkerEffect, AbilityData, int) Recover some percent of HP. For DamageMonster and ReceiveDamage, healing is based on damage recieved or dealt instead of percent HP. public HealthAbility(TrinketTinkerEffect effect, AbilityData data, int lvl) Parameters effect TrinketTinkerEffect data AbilityData lvl int Methods ApplyEffect(ProcEventArgs) Heal the player. If a damage amount is given, heal % of that value, otherwise heal % of max health. protected override bool ApplyEffect(ProcEventArgs proc) Parameters proc ProcEventArgs Returns bool"
  },
  "api/TrinketTinker.Effects.Abilities.HitscanAbility.html": {
    "href": "api/TrinketTinker.Effects.Abilities.HitscanAbility.html",
    "title": "Class HitscanAbility | TrinketTinker",
    "keywords": "Class HitscanAbility Namespace TrinketTinker.Effects.Abilities Assembly TrinketTinker.dll Deal damage to monster within range, optionally stun them for a period. public sealed class HitscanAbility : Ability<DamageArgs>, IAbility Inheritance object Ability<DamageArgs> HitscanAbility Implements IAbility Inherited Members Ability<DamageArgs>.Name Ability<DamageArgs>.Valid Ability<DamageArgs>.Activate(Farmer) Ability<DamageArgs>.Deactivate(Farmer) Ability<DamageArgs>.Update(Farmer, GameTime, GameLocation) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Constructors HitscanAbility(TrinketTinkerEffect, AbilityData, int) Deal damage to monster within range, optionally stun them for a period. public HitscanAbility(TrinketTinkerEffect effect, AbilityData data, int lvl) Parameters effect TrinketTinkerEffect data AbilityData lvl int Methods ApplyEffect(ProcEventArgs) Applies ability effect, mark the ability as not allowed until next tick or longer. protected override bool ApplyEffect(ProcEventArgs proc) Parameters proc ProcEventArgs Returns bool"
  },
  "api/TrinketTinker.Effects.Abilities.IAbility.html": {
    "href": "api/TrinketTinker.Effects.Abilities.IAbility.html",
    "title": "Interface IAbility | TrinketTinker",
    "keywords": "Interface IAbility Namespace TrinketTinker.Effects.Abilities Assembly TrinketTinker.dll public interface IAbility Properties Valid Mark the new ability as valid, if false after constructor the ability is discarded bool Valid { get; } Property Value bool Methods Activate(Farmer) Activate the ability by registering events. bool Activate(Farmer farmer) Parameters farmer Farmer Returns bool Deactivate(Farmer) Deactivate the ability by unregistering events. bool Deactivate(Farmer farmer) Parameters farmer Farmer Returns bool Update(Farmer, GameTime, GameLocation) Perform update every tick. void Update(Farmer farmer, GameTime time, GameLocation location) Parameters farmer Farmer time GameTime location GameLocation"
  },
  "api/TrinketTinker.Effects.Abilities.ItemDropAbility.html": {
    "href": "api/TrinketTinker.Effects.Abilities.ItemDropAbility.html",
    "title": "Class ItemDropAbility | TrinketTinker",
    "keywords": "Class ItemDropAbility Namespace TrinketTinker.Effects.Abilities Assembly TrinketTinker.dll Create item debris on proc. Accepts spawn item arguments, like those used in shop data, never submits any item to Input. public sealed class ItemDropAbility : Ability<SpawnItemArgs>, IAbility Inheritance object Ability<SpawnItemArgs> ItemDropAbility Implements IAbility Inherited Members Ability<SpawnItemArgs>.Name Ability<SpawnItemArgs>.Valid Ability<SpawnItemArgs>.Activate(Farmer) Ability<SpawnItemArgs>.Deactivate(Farmer) Ability<SpawnItemArgs>.Update(Farmer, GameTime, GameLocation) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Constructors ItemDropAbility(TrinketTinkerEffect, AbilityData, int) Create item debris on proc. Accepts spawn item arguments, like those used in shop data, never submits any item to Input. public ItemDropAbility(TrinketTinkerEffect effect, AbilityData data, int lvl) Parameters effect TrinketTinkerEffect data AbilityData lvl int Methods ApplyEffect(ProcEventArgs) Perform item query and try to spawn items. protected override bool ApplyEffect(ProcEventArgs proc) Parameters proc ProcEventArgs Returns bool"
  },
  "api/TrinketTinker.Effects.Abilities.ProjectileAbility.html": {
    "href": "api/TrinketTinker.Effects.Abilities.ProjectileAbility.html",
    "title": "Class ProjectileAbility | TrinketTinker",
    "keywords": "Class ProjectileAbility Namespace TrinketTinker.Effects.Abilities Assembly TrinketTinker.dll Shoot a projectile that deals damage to monster within range, optionally stun them for a period. public sealed class ProjectileAbility : Ability<ProjectileArgs>, IAbility Inheritance object Ability<ProjectileArgs> ProjectileAbility Implements IAbility Inherited Members Ability<ProjectileArgs>.Name Ability<ProjectileArgs>.Valid Ability<ProjectileArgs>.Activate(Farmer) Ability<ProjectileArgs>.Deactivate(Farmer) Ability<ProjectileArgs>.Update(Farmer, GameTime, GameLocation) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Constructors ProjectileAbility(TrinketTinkerEffect, AbilityData, int) Shoot a projectile that deals damage to monster within range, optionally stun them for a period. public ProjectileAbility(TrinketTinkerEffect effect, AbilityData data, int lvl) Parameters effect TrinketTinkerEffect data AbilityData lvl int Methods ApplyEffect(ProcEventArgs) Applies ability effect, mark the ability as not allowed until next tick or longer. protected override bool ApplyEffect(ProcEventArgs proc) Parameters proc ProcEventArgs Returns bool"
  },
  "api/TrinketTinker.Effects.Abilities.StaminaAbility.html": {
    "href": "api/TrinketTinker.Effects.Abilities.StaminaAbility.html",
    "title": "Class StaminaAbility | TrinketTinker",
    "keywords": "Class StaminaAbility Namespace TrinketTinker.Effects.Abilities Assembly TrinketTinker.dll Recover some percent of stamina. public sealed class StaminaAbility : Ability<PercentArgs>, IAbility Inheritance object Ability<PercentArgs> StaminaAbility Implements IAbility Inherited Members Ability<PercentArgs>.Name Ability<PercentArgs>.Valid Ability<PercentArgs>.Activate(Farmer) Ability<PercentArgs>.Deactivate(Farmer) Ability<PercentArgs>.Update(Farmer, GameTime, GameLocation) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Constructors StaminaAbility(TrinketTinkerEffect, AbilityData, int) Recover some percent of stamina. public StaminaAbility(TrinketTinkerEffect effect, AbilityData data, int lvl) Parameters effect TrinketTinkerEffect data AbilityData lvl int Methods ApplyEffect(ProcEventArgs) Heal % based on max Stamina protected override bool ApplyEffect(ProcEventArgs proc) Parameters proc ProcEventArgs Returns bool"
  },
  "api/TrinketTinker.Effects.Abilities.TriggerAbility.html": {
    "href": "api/TrinketTinker.Effects.Abilities.TriggerAbility.html",
    "title": "Class TriggerAbility | TrinketTinker",
    "keywords": "Class TriggerAbility Namespace TrinketTinker.Effects.Abilities Assembly TrinketTinker.dll Raises a trigger (TriggerEventName) on proc. The trinket is given as the target item. public sealed class TriggerAbility : Ability<NoArgs>, IAbility Inheritance object Ability<NoArgs> TriggerAbility Implements IAbility Inherited Members Ability<NoArgs>.Name Ability<NoArgs>.Valid Ability<NoArgs>.Activate(Farmer) Ability<NoArgs>.Deactivate(Farmer) Ability<NoArgs>.Update(Farmer, GameTime, GameLocation) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Constructors TriggerAbility(TrinketTinkerEffect, AbilityData, int) Raises a trigger (TriggerEventName) on proc. The trinket is given as the target item. public TriggerAbility(TrinketTinkerEffect effect, AbilityData data, int lvl) Parameters effect TrinketTinkerEffect data AbilityData lvl int Fields TriggerEventName public static readonly string TriggerEventName Field Value string Methods ApplyEffect(ProcEventArgs) Raise the trigger TriggerEventName protected override bool ApplyEffect(ProcEventArgs proc) Parameters proc ProcEventArgs Returns bool"
  },
  "api/TrinketTinker.Effects.Abilities.html": {
    "href": "api/TrinketTinker.Effects.Abilities.html",
    "title": "Namespace TrinketTinker.Effects.Abilities | TrinketTinker",
    "keywords": "Namespace TrinketTinker.Effects.Abilities Classes Ability<TArgs> Abstract class, proc various effects while trinket is equipped. BuffAbility Applies a buff on proc. DebugDummyAbility Prints many logs, doesn't do anything else. HealthAbility Recover some percent of HP. For DamageMonster and ReceiveDamage, healing is based on damage recieved or dealt instead of percent HP. HitscanAbility Deal damage to monster within range, optionally stun them for a period. ItemDropAbility Create item debris on proc. Accepts spawn item arguments, like those used in shop data, never submits any item to Input. ProjectileAbility Shoot a projectile that deals damage to monster within range, optionally stun them for a period. StaminaAbility Recover some percent of stamina. TriggerAbility Raises a trigger (TriggerEventName) on proc. The trinket is given as the target item. Interfaces IAbility"
  },
  "api/TrinketTinker.Effects.Pewpew.TinkerProjectile.html": {
    "href": "api/TrinketTinker.Effects.Pewpew.TinkerProjectile.html",
    "title": "Class TinkerProjectile | TrinketTinker",
    "keywords": "Class TinkerProjectile Namespace TrinketTinker.Effects.Pewpew Assembly TrinketTinker.dll Custom projectile class, can utilize custom texture and deal damage with optional knockback crit/crit damage and stun. public class TinkerProjectile : Projectile, INetObject<NetFields>, IHaveModData Inheritance object Projectile TinkerProjectile Implements INetObject<NetFields> IHaveModData Inherited Members Projectile.travelTimeBeforeCollisionPossible Projectile.goblinsCurseIndex Projectile.flameBallIndex Projectile.fearBolt Projectile.shadowBall Projectile.bone Projectile.throwingKnife Projectile.snowBall Projectile.shamanBolt Projectile.frostBall Projectile.frozenBolt Projectile.fireball Projectile.slash Projectile.arrowBolt Projectile.launchedSlime Projectile.magicArrow Projectile.iceOrb Projectile.projectileSheetName Projectile.timePerTailUpdate Projectile.boundingBoxWidth Projectile.projectileSheet Projectile.startingAlpha Projectile.currentTileSheetIndex Projectile.itemId Projectile.position Projectile.tailLength Projectile.tailCounter Projectile.bounceSound Projectile.bouncesLeft Projectile.piercesLeft Projectile.travelTime Projectile._rotation Projectile.hostTimeUntilAttackable Projectile.startingRotation Projectile.rotationVelocity Projectile.alpha Projectile.alphaChange Projectile.xVelocity Projectile.yVelocity Projectile.acceleration Projectile.maxVelocity Projectile.color Projectile.tail Projectile.maxTravelDistance Projectile.travelDistance Projectile.projectileID Projectile.uniqueID Projectile.height Projectile.damagesMonsters Projectile.theOneWhoFiredMe Projectile.ignoreTravelGracePeriod Projectile.ignoreLocationCollision Projectile.ignoreObjectCollisions Projectile.ignoreMeleeAttacks Projectile.ignoreCharacterCollisions Projectile.destroyMe Projectile.startingScale Projectile._localScale Projectile.scaleGrow Projectile.light Projectile.hasLit Projectile.lightSourceId Projectile.update(GameTime, GameLocation) Projectile.ShouldApplyCollisionLocally(GameLocation) Projectile.updateTail(GameTime) Projectile.isColliding(GameLocation, out Character, out TerrainFeature) Projectile.getBoundingBox() Projectile.GetTexture() Projectile.GetSourceRect() Projectile.rotation Projectile.IgnoreLocationCollision Projectile.modData Projectile.modDataForSerialization Projectile.NetFields Projectile.localScale object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors TinkerProjectile() Construct an empty instance. public TinkerProjectile() TinkerProjectile(ProjectileArgs, ProcEventArgs, Monster, Vector2) public TinkerProjectile(ProjectileArgs args, ProcEventArgs proc, Monster target, Vector2 sourcePosition) Parameters args ProjectileArgs proc ProcEventArgs target Monster sourcePosition Vector2 Fields addedPrecision public readonly NetInt addedPrecision Field Value NetInt critChance public readonly NetFloat critChance Field Value NetFloat critMultiplier public readonly NetFloat critMultiplier Field Value NetFloat knockBackModifier public readonly NetFloat knockBackModifier Field Value NetFloat maxDamage public readonly NetInt maxDamage Field Value NetInt minDamage public readonly NetInt minDamage Field Value NetInt projectileTexture public readonly NetString projectileTexture Field Value NetString stunTime public readonly NetInt stunTime Field Value NetInt Methods GetCustomTexture() Get the texture to draw for the projectile. public Texture2D GetCustomTexture() Returns Texture2D InitNetFields() Initialize the collection of fields to sync in multiplayer. protected override void InitNetFields() behaviorOnCollisionWithMonster(NPC, GameLocation) public override void behaviorOnCollisionWithMonster(NPC n, GameLocation location) Parameters n NPC location GameLocation behaviorOnCollisionWithOther(GameLocation) public override void behaviorOnCollisionWithOther(GameLocation location) Parameters location GameLocation behaviorOnCollisionWithPlayer(GameLocation, Farmer) public override void behaviorOnCollisionWithPlayer(GameLocation location, Farmer player) Parameters location GameLocation player Farmer behaviorOnCollisionWithTerrainFeature(TerrainFeature, Vector2, GameLocation) public override void behaviorOnCollisionWithTerrainFeature(TerrainFeature t, Vector2 tileLocation, GameLocation location) Parameters t TerrainFeature tileLocation Vector2 location GameLocation draw(SpriteBatch) Needed to override this to get custom texture weh public override void draw(SpriteBatch b) Parameters b SpriteBatch updatePosition(GameTime) same as basic projectile public override void updatePosition(GameTime time) Parameters time GameTime"
  },
  "api/TrinketTinker.Effects.Pewpew.html": {
    "href": "api/TrinketTinker.Effects.Pewpew.html",
    "title": "Namespace TrinketTinker.Effects.Pewpew | TrinketTinker",
    "keywords": "Namespace TrinketTinker.Effects.Pewpew Classes TinkerProjectile Custom projectile class, can utilize custom texture and deal damage with optional knockback crit/crit damage and stun."
  },
  "api/TrinketTinker.Effects.Proc.ProcEventArgs.html": {
    "href": "api/TrinketTinker.Effects.Proc.ProcEventArgs.html",
    "title": "Class ProcEventArgs | TrinketTinker",
    "keywords": "Class ProcEventArgs Namespace TrinketTinker.Effects.Proc Assembly TrinketTinker.dll Proc event data. Most properties are only set for specific kinds of proc. public class ProcEventArgs : EventArgs Inheritance object EventArgs ProcEventArgs Inherited Members EventArgs.Empty object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ProcEventArgs(ProcOn, Farmer) Proc event data. Most properties are only set for specific kinds of proc. public ProcEventArgs(ProcOn procOn, Farmer farmer) Parameters procOn ProcOn farmer Farmer Properties DamageAmount Damage amount, to monster or to player public int? DamageAmount { get; set; } Property Value int? Farmer Player who triggered the event public Farmer Farmer { get; } Property Value Farmer IsBomb Whether damage (to monster) was a bomb public bool? IsBomb { get; set; } Property Value bool? IsCriticalHit Whether damage (to monster) was a critical hit public bool? IsCriticalHit { get; set; } Property Value bool? Location Proc location, one of the backing props of LocationOrCurrent public GameLocation? Location { get; set; } Property Value GameLocation LocationOrCurrent Get the most valid location of this proc, either the event location or the player's current location public GameLocation LocationOrCurrent { get; } Property Value GameLocation Monster Target monster public Monster? Monster { get; set; } Property Value Monster ProcOn Kind of proc triggering this event public ProcOn ProcOn { get; } Property Value ProcOn Time Game time public GameTime? Time { get; set; } Property Value GameTime TriggerArgs Arguments given to trigger action handler. public string[]? TriggerArgs { get; set; } Property Value string[] TriggerContext Trigger action context public TriggerActionContext? TriggerContext { get; set; } Property Value TriggerActionContext?"
  },
  "api/TrinketTinker.Effects.Proc.html": {
    "href": "api/TrinketTinker.Effects.Proc.html",
    "title": "Namespace TrinketTinker.Effects.Proc | TrinketTinker",
    "keywords": "Namespace TrinketTinker.Effects.Proc Classes ProcEventArgs Proc event data. Most properties are only set for specific kinds of proc."
  },
  "api/TrinketTinker.Effects.TrinketTinkerEffect.html": {
    "href": "api/TrinketTinker.Effects.TrinketTinkerEffect.html",
    "title": "Class TrinketTinkerEffect | TrinketTinker",
    "keywords": "Class TrinketTinkerEffect Namespace TrinketTinker.Effects Assembly TrinketTinker.dll Base class for TrinketTinker trinkets, allows extensible companions with extensible abilities. public class TrinketTinkerEffect : TrinketEffect Inheritance object TrinketEffect TrinketTinkerEffect Inherited Members TrinketEffect.Trinket TrinketEffect.GeneralStat TrinketEffect.Companion object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors TrinketTinkerEffect(Trinket) Constructor public TrinketTinkerEffect(Trinket trinket) Parameters trinket Trinket Fields Data Companion data with matching ID protected TinkerData? Data Field Value TinkerData ModData_WhichVariant public readonly string ModData_WhichVariant Field Value string Properties Abilities Abilities for this trinket. protected ImmutableList<IAbility> Abilities { get; } Property Value ImmutableList<IAbility> CompanionAnchor Anchor position of companion. public Vector2 CompanionAnchor { get; } Property Value Vector2 CompanionOwnerDrawLayer Draw layer of owner. public float CompanionOwnerDrawLayer { get; } Property Value float CompanionPosition Position of companion, including offset if applicable. public Vector2? CompanionPosition { get; } Property Value Vector2? Methods Apply(Farmer) Spawn the companion, and activate all abilities public override void Apply(Farmer farmer) Parameters farmer Farmer GenerateRandomStats(Trinket) Re-roll the trinket stats if applicable. public override bool GenerateRandomStats(Trinket trinket) Parameters trinket Trinket The trinket whose stats to re-roll. Returns bool Remarks Returns whether the trinket stats were re-rolled (regardless of whether they changed). OnDamageMonster(Farmer, Monster, int, bool, bool) Handle the player dealing damage to a monster. public override void OnDamageMonster(Farmer farmer, Monster monster, int damageAmount, bool isBomb, bool isCriticalHit) Parameters farmer Farmer The player with the trinket equipped. monster Monster The monster which was damaged. damageAmount int The amount of damage that was dealt. isBomb bool Whether the damage is from a bomb. isCriticalHit bool Whether the attack which caused the damage was a critical hit. OnFootstep(Farmer) Handle the player having taken a step. public override void OnFootstep(Farmer farmer) Parameters farmer Farmer The player with the trinket equipped. OnReceiveDamage(Farmer, int) Handle the player having received damage. public override void OnReceiveDamage(Farmer farmer, int damageAmount) Parameters farmer Farmer The player with the trinket equipped. damageAmount int The amount of damage that was taken. OnTrigger(Farmer, string[], TriggerActionContext) Handle the trigger. public virtual void OnTrigger(Farmer farmer, string[] args, TriggerActionContext context) Parameters farmer Farmer args string[] context TriggerActionContext OnUse(Farmer) Handle the player performing a use action on the trinket. public override void OnUse(Farmer farmer) Parameters farmer Farmer The player using the trinket. RerollVariant(Trinket) Randomize this trinket's variant through trinket colorizer, return true of the variant is rerolled. public virtual bool RerollVariant(Trinket trinket) Parameters trinket Trinket Returns bool SetVariant(Trinket, int) public void SetVariant(Trinket trinket, int variant) Parameters trinket Trinket variant int Unapply(Farmer) Remove the companion, and deactivate all abilities public override void Unapply(Farmer farmer) Parameters farmer Farmer Update(Farmer, GameTime, GameLocation) Update every tick. Not an event because this happens for every ability regardless of ProcOn. public override void Update(Farmer farmer, GameTime time, GameLocation location) Parameters farmer Farmer time GameTime location GameLocation"
  },
  "api/TrinketTinker.Effects.html": {
    "href": "api/TrinketTinker.Effects.html",
    "title": "Namespace TrinketTinker.Effects | TrinketTinker",
    "keywords": "Namespace TrinketTinker.Effects Classes TrinketTinkerEffect Base class for TrinketTinker trinkets, allows extensible companions with extensible abilities."
  },
  "api/TrinketTinker.Extensions.html": {
    "href": "api/TrinketTinker.Extensions.html",
    "title": "Class Extensions | TrinketTinker",
    "keywords": "Class Extensions Namespace TrinketTinker Assembly TrinketTinker.dll public static class Extensions Inheritance object Extensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods AnimatePingPong(AnimatedSprite, GameTime, int, int, float, ref bool) Reverse the animation from last frame, e.g. 1 2 3 4 3 2 1 2 3 4. Ignores StardewValley.AnimatedSprite.loop. public static void AnimatePingPong(this AnimatedSprite s, GameTime gameTime, int startFrame, int numberOfFrames, float interval, ref bool isReverse) Parameters s AnimatedSprite animated sprite gameTime GameTime game time object from update startFrame int initial frame numberOfFrames int length of animation interval float milisecond interval between frames isReverse bool flag for whether animation is going forward or backwards, will be updated in this method."
  },
  "api/TrinketTinker.Models.AbilityArgs.BuffArgs.html": {
    "href": "api/TrinketTinker.Models.AbilityArgs.BuffArgs.html",
    "title": "Class BuffArgs | TrinketTinker",
    "keywords": "Class BuffArgs Namespace TrinketTinker.Models.AbilityArgs Assembly TrinketTinker.dll Buff arguments public sealed class BuffArgs : IArgs Inheritance object BuffArgs Implements IArgs Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Properties BuffId Buff Id, should match something in Data/Buffs public string BuffId { get; set; } Property Value string Methods Validate() Checks if the given arguments are valid, potentially modify arguments to ensure they are valid public bool Validate() Returns bool true if valid"
  },
  "api/TrinketTinker.Models.AbilityArgs.DamageArgs.html": {
    "href": "api/TrinketTinker.Models.AbilityArgs.DamageArgs.html",
    "title": "Class DamageArgs | TrinketTinker",
    "keywords": "Class DamageArgs Namespace TrinketTinker.Models.AbilityArgs Assembly TrinketTinker.dll Damage to monster argument public class DamageArgs : IArgs Inheritance object DamageArgs Implements IArgs Derived ProjectileArgs Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Fields StunTime Stun time in miliseconds public int StunTime Field Value int Properties CritChance Critical chance public float CritChance { get; set; } Property Value float CritDamage Critical damage public float CritDamage { get; set; } Property Value float Knockback Knockback modifier public float Knockback { get; set; } Property Value float Max Max damage, out of 1 public int Max { get; set; } Property Value int Min Min damage public int Min { get; set; } Property Value int Precision Precision modifier public int Precision { get; set; } Property Value int Rand Random percent between min and max public int Rand { get; } Property Value int Range Pixel range for finding monsters public int Range { get; set; } Property Value int Methods DamageMonster(ProcEventArgs, Monster) Do damage and debuff on monster. public void DamageMonster(ProcEventArgs proc, Monster target) Parameters proc ProcEventArgs target Monster Validate() Checks if the given arguments are valid, potentially modify arguments to ensure they are valid public bool Validate() Returns bool true if valid"
  },
  "api/TrinketTinker.Models.AbilityArgs.PercentArgs.html": {
    "href": "api/TrinketTinker.Models.AbilityArgs.PercentArgs.html",
    "title": "Class PercentArgs | TrinketTinker",
    "keywords": "Class PercentArgs Namespace TrinketTinker.Models.AbilityArgs Assembly TrinketTinker.dll Percent arguments public sealed class PercentArgs : IArgs Inheritance object PercentArgs Implements IArgs Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Properties Max Max percent, out of 1 public double Max { get; set; } Property Value double Min Min percent, out of 1 public double Min { get; set; } Property Value double Rand Random percent between min and max public double Rand { get; } Property Value double Methods Validate() Checks if the given arguments are valid, potentially modify arguments to ensure they are valid public bool Validate() Returns bool true if valid"
  },
  "api/TrinketTinker.Models.AbilityArgs.ProjectileArgs.html": {
    "href": "api/TrinketTinker.Models.AbilityArgs.ProjectileArgs.html",
    "title": "Class ProjectileArgs | TrinketTinker",
    "keywords": "Class ProjectileArgs Namespace TrinketTinker.Models.AbilityArgs Assembly TrinketTinker.dll public sealed class ProjectileArgs : DamageArgs, IArgs Inheritance object DamageArgs ProjectileArgs Implements IArgs Inherited Members DamageArgs.Min DamageArgs.Max DamageArgs.Range DamageArgs.Knockback DamageArgs.Precision DamageArgs.CritChance DamageArgs.CritDamage DamageArgs.StunTime DamageArgs.Rand DamageArgs.Validate() DamageArgs.DamageMonster(ProcEventArgs, Monster) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Properties Acceleration Acceleration per tick public float Acceleration { get; set; } Property Value float IgnoreLocationCollisions Let projectile pass through location walls public bool IgnoreLocationCollisions { get; set; } Property Value bool IgnoreObjectCollisions Let projectile pass through objects/terrain feature public bool IgnoreObjectCollisions { get; set; } Property Value bool MaxVelocity Maximum velocity or -1 if not capped public float MaxVelocity { get; set; } Property Value float MinVelocity Initial velocity for projectile public float MinVelocity { get; set; } Property Value float Pierce Number of enemies the projectile can pass through before it is destroyed public int Pierce { get; set; } Property Value int SpriteIndex Projectile texture sprite index public int SpriteIndex { get; set; } Property Value int TailCount Number of trailing sprites to draw public int TailCount { get; set; } Property Value int Texture Projectile texture, need to be 16x16 public string? Texture { get; set; } Property Value string"
  },
  "api/TrinketTinker.Models.AbilityArgs.SpawnItemArgs.html": {
    "href": "api/TrinketTinker.Models.AbilityArgs.SpawnItemArgs.html",
    "title": "Class SpawnItemArgs | TrinketTinker",
    "keywords": "Class SpawnItemArgs Namespace TrinketTinker.Models.AbilityArgs Assembly TrinketTinker.dll Item arguments, accepts everything in SDV item spawn data public sealed class SpawnItemArgs : GenericSpawnItemData, ISpawnItemData, IArgs Inheritance object GenericSpawnItemData SpawnItemArgs Implements ISpawnItemData IArgs Inherited Members GenericSpawnItemData.Id GenericSpawnItemData.ItemId GenericSpawnItemData.RandomItemId GenericSpawnItemData.MaxItems GenericSpawnItemData.MinStack GenericSpawnItemData.MaxStack GenericSpawnItemData.Quality GenericSpawnItemData.ObjectInternalName GenericSpawnItemData.ObjectDisplayName GenericSpawnItemData.ObjectColor GenericSpawnItemData.ToolUpgradeLevel GenericSpawnItemData.IsRecipe GenericSpawnItemData.StackModifiers GenericSpawnItemData.StackModifierMode GenericSpawnItemData.QualityModifiers GenericSpawnItemData.QualityModifierMode GenericSpawnItemData.ModData GenericSpawnItemData.PerItemCondition object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Properties SearchMode How to query the item, by default StardewValley.Internal.ItemQuerySearchMode.RandomOfTypeItem. Be wary of using StardewValley.Internal.ItemQuerySearchMode.All, every matching item will be dropped at once. public ItemQuerySearchMode SearchMode { get; set; } Property Value ItemQuerySearchMode Methods Validate() Checks if the given arguments are valid, potentially modify arguments to ensure they are valid public bool Validate() Returns bool true if valid"
  },
  "api/TrinketTinker.Models.AbilityArgs.html": {
    "href": "api/TrinketTinker.Models.AbilityArgs.html",
    "title": "Namespace TrinketTinker.Models.AbilityArgs | TrinketTinker",
    "keywords": "Namespace TrinketTinker.Models.AbilityArgs Classes BuffArgs Buff arguments DamageArgs Damage to monster argument PercentArgs Percent arguments ProjectileArgs SpawnItemArgs Item arguments, accepts everything in SDV item spawn data"
  },
  "api/TrinketTinker.Models.AbilityData.html": {
    "href": "api/TrinketTinker.Models.AbilityData.html",
    "title": "Class AbilityData | TrinketTinker",
    "keywords": "Class AbilityData Namespace TrinketTinker.Models Assembly TrinketTinker.dll Data for TrinketTinker.Effects.Abilities, defines game effect that a trinket can provide. public sealed class AbilityData : IHaveArgs Inheritance object IHaveArgs AbilityData Inherited Members IHaveArgs.Args object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Fields Name Name of this ability. If unset, a name is generatde from class name and trinket ID. public string Name Field Value string ProcOn Determine when this ability activates. public ProcOn ProcOn Field Value ProcOn Properties AbilityClass Type name of the ability, can use short form like \"Buff\" for buff ability. public string? AbilityClass { get; set; } Property Value string Condition Condition, see StardewValley.GameStateQuery public string? Condition { get; set; } Property Value string DamageThreshold Minimum damage dealt or received before proc. Applies to ReceiveDamage, DamageMonster, and SlayMonster. public int DamageThreshold { get; set; } Property Value int IsBomb Requires the damage be caused by a bomb (true), or not caused by a bomb (false). Applies to DamageMonster and SlayMonster. public bool? IsBomb { get; set; } Property Value bool? IsCriticalHit Requires the damage to be critical hit (true), or not a critical hit (false). Applies to DamageMonster and SlayMonster. public bool? IsCriticalHit { get; set; } Property Value bool? ProcSound Sound cue to play on proc. public string? ProcSound { get; set; } Property Value string ProcTemporarySprites Temporary animated sprites to spawn on proc. public List<TemporaryAnimatedSpriteDefinition> ProcTemporarySprites { get; set; } Property Value List<TemporaryAnimatedSpriteDefinition> ProcTimer Minimum cooldown time between ability activation, all ProcOn values respect this, not just Timer. public double ProcTimer { get; set; } Property Value double"
  },
  "api/TrinketTinker.Models.AnchorTarget.html": {
    "href": "api/TrinketTinker.Models.AnchorTarget.html",
    "title": "Enum AnchorTarget | TrinketTinker",
    "keywords": "Enum AnchorTarget Namespace TrinketTinker.Models Assembly TrinketTinker.dll Which target to anchor (follow/attach) to public enum AnchorTarget Fields Monster = 1 Anchor to the nearest monster Owner = 0 Anchor to the trinket owner"
  },
  "api/TrinketTinker.Models.AnchorTargetData.html": {
    "href": "api/TrinketTinker.Models.AnchorTargetData.html",
    "title": "Class AnchorTargetData | TrinketTinker",
    "keywords": "Class AnchorTargetData Namespace TrinketTinker.Models Assembly TrinketTinker.dll Model defining how companions pick anchor target public class AnchorTargetData Inheritance object AnchorTargetData Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Fields Mode Targeting mode, see AnchorTarget. public AnchorTarget Mode Field Value AnchorTarget Range Search range, applicable to Monster. public int Range Field Value int"
  },
  "api/TrinketTinker.Models.DirectionMode.html": {
    "href": "api/TrinketTinker.Models.DirectionMode.html",
    "title": "Enum DirectionMode | TrinketTinker",
    "keywords": "Enum DirectionMode Namespace TrinketTinker.Models Assembly TrinketTinker.dll Determine how the sprites are interpreted. public enum DirectionMode Fields DRU = 3 Has down/right/up animations, flips the right animation to go left. DRUL = 4 Has down/right/up/left animations None = 0 Direction never changes. R = 1 Has right animations, flips sprite if going left RL = 2 Has right/left animations, no down/up Rotate = 5 Sprite is rotated to angular direction."
  },
  "api/TrinketTinker.Models.LayerDepth.html": {
    "href": "api/TrinketTinker.Models.LayerDepth.html",
    "title": "Enum LayerDepth | TrinketTinker",
    "keywords": "Enum LayerDepth Namespace TrinketTinker.Models Assembly TrinketTinker.dll Determine the layer depth to use when drawing the companion public enum LayerDepth Fields Behind = 0 Draw just behind the farmer. InFront = 2 Draw just in front of the farmer Position = 1 Draw according to current Y position"
  },
  "api/TrinketTinker.Models.LoopMode.html": {
    "href": "api/TrinketTinker.Models.LoopMode.html",
    "title": "Enum LoopMode | TrinketTinker",
    "keywords": "Enum LoopMode Namespace TrinketTinker.Models Assembly TrinketTinker.dll Determine how sprites loop. public enum LoopMode Fields PingPong = 1 Reverse the animation from last frame, e.g. 1 2 3 4 3 2 1 2 3 4 Standard = 0 Loops to start from last frame, e.g. 1 2 3 4 1 2 3 4 1 2 3 4"
  },
  "api/TrinketTinker.Models.Mixin.IArgs.html": {
    "href": "api/TrinketTinker.Models.Mixin.IArgs.html",
    "title": "Interface IArgs | TrinketTinker",
    "keywords": "Interface IArgs Namespace TrinketTinker.Models.Mixin Assembly TrinketTinker.dll Interface for args which can change depending on the recipient of the data public interface IArgs Methods Validate() Checks if the given arguments are valid, potentially modify arguments to ensure they are valid bool Validate() Returns bool true if valid"
  },
  "api/TrinketTinker.Models.Mixin.IHaveArgs.html": {
    "href": "api/TrinketTinker.Models.Mixin.IHaveArgs.html",
    "title": "Class IHaveArgs | TrinketTinker",
    "keywords": "Class IHaveArgs Namespace TrinketTinker.Models.Mixin Assembly TrinketTinker.dll public abstract class IHaveArgs Inheritance object IHaveArgs Derived AbilityData MotionData Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Args Arbiturary arguments in form of a dict. public Dictionary<string, string>? Args { get; set; } Property Value Dictionary<string, string>"
  },
  "api/TrinketTinker.Models.Mixin.NoArgs.html": {
    "href": "api/TrinketTinker.Models.Mixin.NoArgs.html",
    "title": "Class NoArgs | TrinketTinker",
    "keywords": "Class NoArgs Namespace TrinketTinker.Models.Mixin Assembly TrinketTinker.dll No arguments are needed, Args will not be parsed. public sealed class NoArgs : IArgs Inheritance object NoArgs Implements IArgs Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Methods Validate() Checks if the given arguments are valid, potentially modify arguments to ensure they are valid public bool Validate() Returns bool true if valid"
  },
  "api/TrinketTinker.Models.Mixin.html": {
    "href": "api/TrinketTinker.Models.Mixin.html",
    "title": "Namespace TrinketTinker.Models.Mixin | TrinketTinker",
    "keywords": "Namespace TrinketTinker.Models.Mixin Classes IHaveArgs NoArgs No arguments are needed, Args will not be parsed. Interfaces IArgs Interface for args which can change depending on the recipient of the data"
  },
  "api/TrinketTinker.Models.MotionArgs.BounceArgs.html": {
    "href": "api/TrinketTinker.Models.MotionArgs.BounceArgs.html",
    "title": "Class BounceArgs | TrinketTinker",
    "keywords": "Class BounceArgs Namespace TrinketTinker.Models.MotionArgs Assembly TrinketTinker.dll Minimum and maximum float public sealed class BounceArgs : LerpArgs, IArgs Inheritance object LerpArgs BounceArgs Implements IArgs Inherited Members LerpArgs.Min LerpArgs.Max LerpArgs.Validate() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Properties MaxHeight Bounce height public float MaxHeight { get; set; } Property Value float Squash Deform when hitting the ground public bool Squash { get; set; } Property Value bool"
  },
  "api/TrinketTinker.Models.MotionArgs.HoverArgs.html": {
    "href": "api/TrinketTinker.Models.MotionArgs.HoverArgs.html",
    "title": "Class HoverArgs | TrinketTinker",
    "keywords": "Class HoverArgs Namespace TrinketTinker.Models.MotionArgs Assembly TrinketTinker.dll Hover magnitude (wiggleness) public sealed class HoverArgs : LerpArgs, IArgs Inheritance object LerpArgs HoverArgs Implements IArgs Inherited Members LerpArgs.Min LerpArgs.Max LerpArgs.Validate() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Properties Magnitude Amount of up and down bobbing motion to add to hover public float Magnitude { get; set; } Property Value float"
  },
  "api/TrinketTinker.Models.MotionArgs.LerpArgs.html": {
    "href": "api/TrinketTinker.Models.MotionArgs.LerpArgs.html",
    "title": "Class LerpArgs | TrinketTinker",
    "keywords": "Class LerpArgs Namespace TrinketTinker.Models.MotionArgs Assembly TrinketTinker.dll Minimum and maximum float public class LerpArgs : IArgs Inheritance object LerpArgs Implements IArgs Derived BounceArgs HoverArgs Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Max Max distance from anchor, if the companion is farther away than this, teleport. public float Max { get; set; } Property Value float Min Min distance from anchor, the companion does not move until they are this far from the anchor. public float Min { get; set; } Property Value float Methods Validate() Checks if the given arguments are valid, potentially modify arguments to ensure they are valid public bool Validate() Returns bool true if valid"
  },
  "api/TrinketTinker.Models.MotionArgs.OrbitArgs.html": {
    "href": "api/TrinketTinker.Models.MotionArgs.OrbitArgs.html",
    "title": "Class OrbitArgs | TrinketTinker",
    "keywords": "Class OrbitArgs Namespace TrinketTinker.Models.MotionArgs Assembly TrinketTinker.dll Orbit radius public sealed class OrbitArgs : StaticArgs, IArgs Inheritance object StaticArgs OrbitArgs Implements IArgs Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Properties RadiusX Orbit radius, horizontal public float RadiusX { get; set; } Property Value float RadiusY Orbit radius, vertical public float RadiusY { get; set; } Property Value float Methods Validate() public bool Validate() Returns bool"
  },
  "api/TrinketTinker.Models.MotionArgs.StaticArgs.html": {
    "href": "api/TrinketTinker.Models.MotionArgs.StaticArgs.html",
    "title": "Class StaticArgs | TrinketTinker",
    "keywords": "Class StaticArgs Namespace TrinketTinker.Models.MotionArgs Assembly TrinketTinker.dll Args for static motion public class StaticArgs : IArgs Inheritance object StaticArgs Implements IArgs Derived OrbitArgs Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Validate() Checks if the given arguments are valid, potentially modify arguments to ensure they are valid public bool Validate() Returns bool true if valid"
  },
  "api/TrinketTinker.Models.MotionArgs.html": {
    "href": "api/TrinketTinker.Models.MotionArgs.html",
    "title": "Namespace TrinketTinker.Models.MotionArgs | TrinketTinker",
    "keywords": "Namespace TrinketTinker.Models.MotionArgs Classes BounceArgs Minimum and maximum float HoverArgs Hover magnitude (wiggleness) LerpArgs Minimum and maximum float OrbitArgs Orbit radius StaticArgs Args for static motion"
  },
  "api/TrinketTinker.Models.MotionData.html": {
    "href": "api/TrinketTinker.Models.MotionData.html",
    "title": "Class MotionData | TrinketTinker",
    "keywords": "Class MotionData Namespace TrinketTinker.Models Assembly TrinketTinker.dll Data for TrinketTinker.Companions.Motions, defines how a companion moves. public sealed class MotionData : IHaveArgs Inheritance object IHaveArgs MotionData Inherited Members IHaveArgs.Args object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Properties AlwaysMoving If true, continue animation when not moving. public bool AlwaysMoving { get; set; } Property Value bool Anchors Prefer AnchorTargetData that comes earlier in the list. Defaults to Owner. public List<AnchorTargetData> Anchors { get; set; } Property Value List<AnchorTargetData> AnimationFrameLength Length of 1 set of movement animation. public int AnimationFrameLength { get; set; } Property Value int AnimationFrameStart public int AnimationFrameStart { get; set; } Property Value int DirectionMode Direction mode, determines how sprites should be arranged. public DirectionMode DirectionMode { get; set; } Property Value DirectionMode Interval Miliseconds between frames. public float Interval { get; set; } Property Value float LayerDepth Layer depth mode. public LayerDepth LayerDepth { get; set; } Property Value LayerDepth LightRadius If set, add a light with given radius. Note that the light is only visible to local player. public float LightRadius { get; set; } Property Value float LoopMode First frame of the animation. public LoopMode LoopMode { get; set; } Property Value LoopMode MotionClass Type name of the motion, can use short form like \"Hover\" for hover motion. public string? MotionClass { get; set; } Property Value string Offset Position offset. public Vector2 Offset { get; set; } Property Value Vector2 ShadowScale Base scale to draw shadow texture. public float ShadowScale { get; set; } Property Value float TextureScale Base scale to draw texture at. public float TextureScale { get; set; } Property Value float"
  },
  "api/TrinketTinker.Models.ProcOn.html": {
    "href": "api/TrinketTinker.Models.ProcOn.html",
    "title": "Enum ProcOn | TrinketTinker",
    "keywords": "Enum ProcOn Namespace TrinketTinker.Models Assembly TrinketTinker.dll Defines how an ability can proc (activate). public enum ProcOn Fields Always = 0 Proc on equip, ignores all conditions. DamageMonster = 4 Proc on monster damaged. Footstep = 2 Proc on walk. ReceiveDamage = 3 Proc on player damaged. SlayMonster = 5 Proc on monster slayed. Timer = 6 Proc on timer elapsed. Trigger = 7 Proc on trigger action. Use = 1 Proc on use (right click while holding)."
  },
  "api/TrinketTinker.Models.TinkerData.html": {
    "href": "api/TrinketTinker.Models.TinkerData.html",
    "title": "Class TinkerData | TrinketTinker",
    "keywords": "Class TinkerData Namespace TrinketTinker.Models Assembly TrinketTinker.dll Top level data class for TinkerAsset entries. public sealed class TinkerData Inheritance object TinkerData Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Properties Abilities List of abilities public List<List<AbilityData>> Abilities { get; set; } Property Value List<List<AbilityData>> CompanionClass Class name, need to be fully qualified. Will use TrinketTinkerCompanion if not set. public string? CompanionClass { get; set; } Property Value string MinLevel Trinket stat minimum level, this added to the internal level value that is based on size of Abilities public int MinLevel { get; set; } Property Value int Motions List of motions public List<MotionData> Motions { get; set; } Property Value List<MotionData> Variants List of variants public List<VariantData> Variants { get; set; } Property Value List<VariantData>"
  },
  "api/TrinketTinker.Models.VariantData.html": {
    "href": "api/TrinketTinker.Models.VariantData.html",
    "title": "Class VariantData | TrinketTinker",
    "keywords": "Class VariantData Namespace TrinketTinker.Models Assembly TrinketTinker.dll Data for TrinketTinker.Effects.Abilities, holds sprite variations. public sealed class VariantData Inheritance object VariantData Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Properties ColorMask Draw color mask, can use color name from Microsoft.Xna.Framework.Color, hex value, or COLOR_PRISMATIC for animated prismatic effect. public string? ColorMask { get; set; } Property Value string Height Sprite height public int Height { get; set; } Property Value int Texture Variant texture content path. public string Texture { get; set; } Property Value string Width Sprite width public int Width { get; set; } Property Value int"
  },
  "api/TrinketTinker.Models.html": {
    "href": "api/TrinketTinker.Models.html",
    "title": "Namespace TrinketTinker.Models | TrinketTinker",
    "keywords": "Namespace TrinketTinker.Models Classes AbilityData Data for TrinketTinker.Effects.Abilities, defines game effect that a trinket can provide. AnchorTargetData Model defining how companions pick anchor target MotionData Data for TrinketTinker.Companions.Motions, defines how a companion moves. TinkerData Top level data class for TinkerAsset entries. VariantData Data for TrinketTinker.Effects.Abilities, holds sprite variations. Enums AnchorTarget Which target to anchor (follow/attach) to DirectionMode Determine how the sprites are interpreted. LayerDepth Determine the layer depth to use when drawing the companion LoopMode Determine how sprites loop. ProcOn Defines how an ability can proc (activate)."
  },
  "api/TrinketTinker.html": {
    "href": "api/TrinketTinker.html",
    "title": "Namespace TrinketTinker | TrinketTinker",
    "keywords": "Namespace TrinketTinker Classes Extensions"
  },
  "docs/getting-started.html": {
    "href": "docs/getting-started.html",
    "title": "Getting Started | TrinketTinker",
    "keywords": "Getting Started"
  },
  "docs/introduction.html": {
    "href": "docs/introduction.html",
    "title": "Introduction | TrinketTinker",
    "keywords": "Introduction"
  },
  "index.html": {
    "href": "index.html",
    "title": "This is the HOMEPAGE. | TrinketTinker",
    "keywords": "This is the HOMEPAGE. Refer to Markdown for how to write markdown files. Quick Start Notes: Add images to the images folder if the file is referencing an image."
  }
}